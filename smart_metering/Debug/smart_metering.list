
smart_metering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013030  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c9b0  0801c9b0  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c9b0  0801c9b0  0002c9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9b8  0801c9b8  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c9b8  0801c9b8  0002c9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c9bc  0801c9bc  0002c9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801c9c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009cec  200000a8  0801ca68  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009d94  0801ca68  00039d94  2**0
                  ALLOC
 11 .buffer       00008000  10000000  10000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002147a  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000469e  00000000  00000000  0005160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001630  00000000  00000000  00055ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000106f  00000000  00000000  000572d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003aaa8  00000000  00000000  00058347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c9ba  00000000  00000000  00092def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108605  00000000  00000000  000af7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f78  00000000  00000000  001b7db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001bdd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002f41  00000000  00000000  001bdd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000b8  00000000  00000000  001c0cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009968 	.word	0x08009968

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08009968 	.word	0x08009968

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MB1_SelectRS485Line>:
	ModuleInfo.byte.bit.InputcoilLength   	= c_MB1_FC01_Length;
}

/* MB1 Select RS485 Line Tx/Rx */
void MB1_SelectRS485Line(unsigned short p_TxRxLine)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	switch(p_TxRxLine)
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <MB1_SelectRS485Line+0x16>
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d007      	beq.n	8000e60 <MB1_SelectRS485Line+0x24>

		case c_RS485_Rx:
			MB1_RS485_Rx
		break;
	}
}
 8000e50:	e00d      	b.n	8000e6e <MB1_SelectRS485Line+0x32>
			MB1_RS485_Tx
 8000e52:	2201      	movs	r2, #1
 8000e54:	2102      	movs	r1, #2
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f003 fab3 	bl	80043c4 <HAL_GPIO_WritePin>
		break;
 8000e5e:	e006      	b.n	8000e6e <MB1_SelectRS485Line+0x32>
			MB1_RS485_Rx
 8000e60:	2200      	movs	r2, #0
 8000e62:	2102      	movs	r1, #2
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f003 faac 	bl	80043c4 <HAL_GPIO_WritePin>
		break;
 8000e6c:	bf00      	nop
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <GetUSART2RxCount>:
		HAL_UART_Transmit_IT(&USART_3_HANDLE, MB1_outbox, p_tx_length+1);
	}
}

void GetUSART2RxCount(unsigned short * p_Rxcount,unsigned short * p_CompltFlag)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	if(l_MB1_Rx_index >= 3 && l_MB1_Rx_index < C_MB1_INBOX_LENGTH)
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <GetUSART2RxCount+0x50>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d90c      	bls.n	8000ea4 <GetUSART2RxCount+0x2c>
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <GetUSART2RxCount+0x50>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8000e92:	d807      	bhi.n	8000ea4 <GetUSART2RxCount+0x2c>
	{
		*p_CompltFlag = 1;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2201      	movs	r2, #1
 8000e98:	801a      	strh	r2, [r3, #0]
		*p_Rxcount = l_MB1_Rx_index;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <GetUSART2RxCount+0x50>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	801a      	strh	r2, [r3, #0]
 8000ea2:	e00a      	b.n	8000eba <GetUSART2RxCount+0x42>
	}
	else
	{
	 	*p_CompltFlag = 0;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	801a      	strh	r2, [r3, #0]
		*p_Rxcount = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4906      	ldr	r1, [pc, #24]	; (8000ecc <GetUSART2RxCount+0x54>)
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <GetUSART2RxCount+0x58>)
 8000eb6:	f006 f811 	bl	8006edc <HAL_UART_Receive_IT>
	}
	l_MB1_Rx_index = 0;
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <GetUSART2RxCount+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200002da 	.word	0x200002da
 8000ecc:	200007b0 	.word	0x200007b0
 8000ed0:	2000036c 	.word	0x2000036c

08000ed4 <USART2_IRQHandler>:
		  HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
	}
}

void USART2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&USART_2_HANDLE);  // Call the HAL UART interrupt handler for USART2
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <USART2_IRQHandler+0x10>)
 8000eda:	f006 f84b 	bl	8006f74 <HAL_UART_IRQHandler>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002e4 	.word	0x200002e4

08000ee8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&USART_3_HANDLE);  // Call the HAL UART interrupt handler for USART2
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f006 f841 	bl	8006f74 <HAL_UART_IRQHandler>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000036c 	.word	0x2000036c

08000efc <HAL_UART_RxCpltCallback>:

unsigned short l_EOF_Rx_Flag=0;
unsigned short l_EOF_Tx_Flag;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <HAL_UART_RxCpltCallback+0xe0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d115      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x3c>
	{
		BP35C5_Inbox[rx_index++] = Inbox[0];
 8000f0c:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <HAL_UART_RxCpltCallback+0xe4>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	b291      	uxth	r1, r2
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_UART_RxCpltCallback+0xe4>)
 8000f16:	8011      	strh	r1, [r2, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_UART_RxCpltCallback+0xe8>)
 8000f1c:	7819      	ldrb	r1, [r3, #0]
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_UART_RxCpltCallback+0xec>)
 8000f20:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)Inbox, 1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	492f      	ldr	r1, [pc, #188]	; (8000fe4 <HAL_UART_RxCpltCallback+0xe8>)
 8000f26:	482d      	ldr	r0, [pc, #180]	; (8000fdc <HAL_UART_RxCpltCallback+0xe0>)
 8000f28:	f005 ffd8 	bl	8006edc <HAL_UART_Receive_IT>
		l_EOF_Rx_Flag = 1;
 8000f2c:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_UART_RxCpltCallback+0xf0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	801a      	strh	r2, [r3, #0]
		MX_TIM17_Init();
 8000f32:	f000 fb17 	bl	8001564 <MX_TIM17_Init>
  		l_MB1_Rx_index++;
  		HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
  		l_EOF_Rx_Flag=1;
  		MX_TIM16_Init();
    }
}
 8000f36:	e04c      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0xd6>
	else if (huart == &USART_2_HANDLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <HAL_UART_RxCpltCallback+0xf4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d122      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x8a>
		if(l_MB1_Rx_index > C_MB1_INBOX_LENGTH)				 //EDITED BY GAGAN GOWDA G R DATE 12/02/2022//
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000f48:	d302      	bcc.n	8000f50 <HAL_UART_RxCpltCallback+0x54>
		l_MB1_Rx_index = 0;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	801a      	strh	r2, [r3, #0]
		MB1_inbox[l_MB1_Rx_index] = USART_2_HANDLE.Instance->RDR;  // Store received byte in buffer
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_UART_RxCpltCallback+0xf4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f56:	b299      	uxth	r1, r3
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	b2c9      	uxtb	r1, r1
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <HAL_UART_RxCpltCallback+0xfc>)
 8000f62:	5499      	strb	r1, [r3, r2]
		l_MB1_Rx_index++;
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f6e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&USART_2_HANDLE, &Rx_Data[0], 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	4922      	ldr	r1, [pc, #136]	; (8000ffc <HAL_UART_RxCpltCallback+0x100>)
 8000f74:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <HAL_UART_RxCpltCallback+0xf4>)
 8000f76:	f005 ffb1 	bl	8006edc <HAL_UART_Receive_IT>
		l_EOF_Rx_Flag=1;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_UART_RxCpltCallback+0xf0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	801a      	strh	r2, [r3, #0]
		MX_TIM16_Init();
 8000f80:	f000 fabe 	bl	8001500 <MX_TIM16_Init>
}
 8000f84:	e025      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0xd6>
	else if(huart == &USART_3_HANDLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_UART_RxCpltCallback+0x104>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d121      	bne.n	8000fd2 <HAL_UART_RxCpltCallback+0xd6>
  		if(l_MB1_Rx_index > C_MB1_INBOX_LENGTH)				 //EDITED BY GAGAN GOWDA G R DATE 12/02/2022//
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000f96:	d302      	bcc.n	8000f9e <HAL_UART_RxCpltCallback+0xa2>
  		l_MB1_Rx_index = 0;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
  		MB1_inbox[l_MB1_Rx_index] = USART_3_HANDLE.Instance->RDR;  // Store received byte in buffer
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_UART_RxCpltCallback+0x104>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	b2c9      	uxtb	r1, r1
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_UART_RxCpltCallback+0xfc>)
 8000fb0:	5499      	strb	r1, [r3, r2]
  		l_MB1_Rx_index++;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_RxCpltCallback+0xf8>)
 8000fbc:	801a      	strh	r2, [r3, #0]
  		HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	490e      	ldr	r1, [pc, #56]	; (8000ffc <HAL_UART_RxCpltCallback+0x100>)
 8000fc2:	480f      	ldr	r0, [pc, #60]	; (8001000 <HAL_UART_RxCpltCallback+0x104>)
 8000fc4:	f005 ff8a 	bl	8006edc <HAL_UART_Receive_IT>
  		l_EOF_Rx_Flag=1;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_UART_RxCpltCallback+0xf0>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	801a      	strh	r2, [r3, #0]
  		MX_TIM16_Init();
 8000fce:	f000 fa97 	bl	8001500 <MX_TIM16_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200006a0 	.word	0x200006a0
 8000fe0:	200004bc 	.word	0x200004bc
 8000fe4:	200008bc 	.word	0x200008bc
 8000fe8:	200003f4 	.word	0x200003f4
 8000fec:	200004be 	.word	0x200004be
 8000ff0:	200002e4 	.word	0x200002e4
 8000ff4:	200002da 	.word	0x200002da
 8000ff8:	200000c4 	.word	0x200000c4
 8000ffc:	200007b0 	.word	0x200007b0
 8001000:	2000036c 	.word	0x2000036c

08001004 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <HAL_UART_TxCpltCallback+0x8c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d105      	bne.n	8001020 <HAL_UART_TxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, (uint8_t *)Inbox, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	491f      	ldr	r1, [pc, #124]	; (8001094 <HAL_UART_TxCpltCallback+0x90>)
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <HAL_UART_TxCpltCallback+0x8c>)
 800101a:	f005 ff5f 	bl	8006edc <HAL_UART_Receive_IT>
			 l_EOF_Tx_Flag 	= 1;
			 MX_TIM16_Init();
			 HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
		}
	 }
}
 800101e:	e032      	b.n	8001086 <HAL_UART_TxCpltCallback+0x82>
	else if (huart == &USART_2_HANDLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_UART_TxCpltCallback+0x94>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d10b      	bne.n	8001040 <HAL_UART_TxCpltCallback+0x3c>
		 	 l_MB1_Tx_index	= 0;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_UART_TxCpltCallback+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	801a      	strh	r2, [r3, #0]
			 l_EOF_Tx_Flag 	= 1;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_UART_TxCpltCallback+0x9c>)
 8001030:	2201      	movs	r2, #1
 8001032:	801a      	strh	r2, [r3, #0]
			 HAL_UART_Receive_IT(&USART_2_HANDLE, &Rx_Data[0], 1);
 8001034:	2201      	movs	r2, #1
 8001036:	491b      	ldr	r1, [pc, #108]	; (80010a4 <HAL_UART_TxCpltCallback+0xa0>)
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <HAL_UART_TxCpltCallback+0x94>)
 800103a:	f005 ff4f 	bl	8006edc <HAL_UART_Receive_IT>
}
 800103e:	e022      	b.n	8001086 <HAL_UART_TxCpltCallback+0x82>
	 else if(huart == &USART_3_HANDLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_UART_TxCpltCallback+0xa4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d11e      	bne.n	8001086 <HAL_UART_TxCpltCallback+0x82>
		USART2->TDR=MB1_outbox[l_MB1_Tx_index];	//transmit a byte;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_TxCpltCallback+0x98>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_UART_TxCpltCallback+0xa8>)
 8001050:	5c9a      	ldrb	r2, [r3, r2]
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_UART_TxCpltCallback+0xac>)
 8001054:	b292      	uxth	r2, r2
 8001056:	851a      	strh	r2, [r3, #40]	; 0x28
		if(l_MB1_Tx_index++>=l_MB1_Tx_Count)
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_UART_TxCpltCallback+0x98>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	b291      	uxth	r1, r2
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_UART_TxCpltCallback+0x98>)
 8001062:	8011      	strh	r1, [r2, #0]
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_UART_TxCpltCallback+0xb0>)
 8001066:	8812      	ldrh	r2, [r2, #0]
 8001068:	4293      	cmp	r3, r2
 800106a:	d30c      	bcc.n	8001086 <HAL_UART_TxCpltCallback+0x82>
		 	 l_MB1_Tx_index	= 0;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_UART_TxCpltCallback+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
			 l_EOF_Tx_Flag 	= 1;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_UART_TxCpltCallback+0x9c>)
 8001074:	2201      	movs	r2, #1
 8001076:	801a      	strh	r2, [r3, #0]
			 MX_TIM16_Init();
 8001078:	f000 fa42 	bl	8001500 <MX_TIM16_Init>
			 HAL_UART_Receive_IT(&USART_3_HANDLE, &Rx_Data[0], 1);
 800107c:	2201      	movs	r2, #1
 800107e:	4909      	ldr	r1, [pc, #36]	; (80010a4 <HAL_UART_TxCpltCallback+0xa0>)
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_TxCpltCallback+0xa4>)
 8001082:	f005 ff2b 	bl	8006edc <HAL_UART_Receive_IT>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200006a0 	.word	0x200006a0
 8001094:	200008bc 	.word	0x200008bc
 8001098:	200002e4 	.word	0x200002e4
 800109c:	200002dc 	.word	0x200002dc
 80010a0:	200004c0 	.word	0x200004c0
 80010a4:	200007b0 	.word	0x200007b0
 80010a8:	2000036c 	.word	0x2000036c
 80010ac:	200001d0 	.word	0x200001d0
 80010b0:	40004400 	.word	0x40004400
 80010b4:	200002de 	.word	0x200002de

080010b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM16)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d118      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x44>
    {
    	if(l_EOF_Rx_Flag==1)
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d106      	bne.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x28>
    	{
    		l_EOF_Rx_Flag=0;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]
    		GetUSART2RxCount(&gl_MB1_ReceivedByteCount,&gl_MB1_ReceiveFrameComplete_Flag);
 80010d8:	4919      	ldr	r1, [pc, #100]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010da:	481a      	ldr	r0, [pc, #104]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010dc:	f7ff fecc 	bl	8000e78 <GetUSART2RxCount>
    	}

    	if(l_EOF_Tx_Flag==1)
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    	{
    		l_EOF_Tx_Flag=0;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
    		MB1_SelectRS485Line(c_RS485_Rx);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fea4 	bl	8000e3c <MB1_SelectRS485Line>
    	}

		HAL_TIM_Base_Stop_IT(&htim16);
 80010f4:	4815      	ldr	r0, [pc, #84]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010f6:	f004 fdc1 	bl	8005c7c <HAL_TIM_Base_Stop_IT>
    else if(htim->Instance == TIM7)
    {
    	MX_TIM7_Init();
    	BP35C5_SendResponse_Flag = 1;
    }
}
 80010fa:	e019      	b.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x78>
    else if (htim->Instance == TIM17)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10a      	bne.n	800111c <HAL_TIM_PeriodElapsedCallback+0x64>
    	if(l_EOF_Rx_Flag==1)
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d110      	bne.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x78>
			l_EOF_Rx_Flag=0;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	801a      	strh	r2, [r3, #0]
			BP35C5_RecieveQuery_Flag = 1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	e009      	b.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x78>
    else if(htim->Instance == TIM7)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d104      	bne.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x78>
    	MX_TIM7_Init();
 8001126:	f000 f9ab 	bl	8001480 <MX_TIM7_Init>
    	BP35C5_SendResponse_Flag = 1;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40014400 	.word	0x40014400
 800113c:	200004be 	.word	0x200004be
 8001140:	200002e2 	.word	0x200002e2
 8001144:	200002e0 	.word	0x200002e0
 8001148:	200004c0 	.word	0x200004c0
 800114c:	20000608 	.word	0x20000608
 8001150:	40014800 	.word	0x40014800
 8001154:	200008ce 	.word	0x200008ce
 8001158:	40001400 	.word	0x40001400
 800115c:	200008cd 	.word	0x200008cd

08001160 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	gl_ADC_samplingConv_Cmplt_flag = 1;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_ADC_ConvCpltCallback+0x1c>)
 800116a:	2201      	movs	r2, #1
 800116c:	801a      	strh	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20001c42 	.word	0x20001c42

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f001 f8d0 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f836 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 fa9a 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001190:	f000 fa7a 	bl	8001688 <MX_DMA_Init>
//  MX_TIM16_Init();
  MX_USART2_UART_Init();
 8001194:	f000 fa48 	bl	8001628 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001198:	f000 fa16 	bl	80015c8 <MX_USART1_UART_Init>
//  MX_TIM17_Init();
  MX_ADC3_Init();
 800119c:	f000 f87e 	bl	800129c <MX_ADC3_Init>
  MX_TIM7_Init();
 80011a0:	f000 f96e 	bl	8001480 <MX_TIM7_Init>
  MX_TIM1_Init();
 80011a4:	f000 f8e0 	bl	8001368 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  data_array();
 80011a8:	f000 faf8 	bl	800179c <data_array>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)Inbox, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <main+0x64>)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <main+0x68>)
 80011b2:	f005 fe93 	bl	8006edc <HAL_UART_Receive_IT>

//  get_sineval();
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val, 1024, DAC_ALIGN_12B_R);

  FFT_initialization();
 80011b6:	f001 f80b 	bl	80021d0 <FFT_initialization>

  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC_Data, ADC_sampling_length);
 80011ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <main+0x6c>)
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <main+0x70>)
 80011c2:	f001 fc53 	bl	8002a6c <HAL_ADC_Start_DMA>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <main+0x74>)
 80011ca:	f004 fddd 	bl	8005d88 <HAL_TIM_PWM_Start>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <main+0x58>
    				Error_Handler();
 80011d4:	f000 fadc 	bl	8001790 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BP35C5_process();
 80011d8:	f000 fb04 	bl	80017e4 <BP35C5_process>
	  vmm_process();
 80011dc:	f000 ff20 	bl	8002020 <vmm_process>
	  BP35C5_process();
 80011e0:	e7fa      	b.n	80011d8 <main+0x58>
 80011e2:	bf00      	nop
 80011e4:	200008bc 	.word	0x200008bc
 80011e8:	200006a0 	.word	0x200006a0
 80011ec:	20001c44 	.word	0x20001c44
 80011f0:	200004c4 	.word	0x200004c4
 80011f4:	20000570 	.word	0x20000570

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	; 0x58
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2244      	movs	r2, #68	; 0x44
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fa54 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121e:	f003 f8f7 	bl	8004410 <HAL_PWREx_ControlVoltageScaling>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001228:	f000 fab2 	bl	8001790 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	2310      	movs	r3, #16
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123e:	2302      	movs	r3, #2
 8001240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001246:	230a      	movs	r3, #10
 8001248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124a:	2307      	movs	r3, #7
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4618      	mov	r0, r3
 800125c:	f003 f92e 	bl	80044bc <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001266:	f000 fa93 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2303      	movs	r3, #3
 8001270:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fcf6 	bl	8004c74 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800128e:	f000 fa7f 	bl	8001790 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3758      	adds	r7, #88	; 0x58
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_ADC3_Init+0xc0>)
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <MX_ADC3_Init+0xc4>)
 80012b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_ADC3_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_ADC3_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_ADC3_Init+0xc0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_ADC3_Init+0xc0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_ADC3_Init+0xc0>)
 80012d2:	2204      	movs	r2, #4
 80012d4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC3_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC3_Init+0xc0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_ADC3_Init+0xc0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_ADC3_Init+0xc0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_ADC3_Init+0xc0>)
 80012f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_ADC3_Init+0xc0>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_ADC3_Init+0xc0>)
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_ADC3_Init+0xc0>)
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_ADC3_Init+0xc0>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_ADC3_Init+0xc0>)
 8001318:	f001 fa58 	bl	80027cc <HAL_ADC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8001322:	f000 fa35 	bl	8001790 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_ADC3_Init+0xc8>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132a:	2306      	movs	r3, #6
 800132c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001332:	237f      	movs	r3, #127	; 0x7f
 8001334:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001336:	2304      	movs	r3, #4
 8001338:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC3_Init+0xc0>)
 8001344:	f001 fc62 	bl	8002c0c <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800134e:	f000 fa1f 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200004c4 	.word	0x200004c4
 8001360:	50040200 	.word	0x50040200
 8001364:	04300002 	.word	0x04300002

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	222c      	movs	r2, #44	; 0x2c
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f008 f98d 	bl	80096b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <MX_TIM1_Init+0x110>)
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <MX_TIM1_Init+0x114>)
 800139e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_TIM1_Init+0x110>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_TIM1_Init+0x110>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_TIM1_Init+0x110>)
 80013ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_TIM1_Init+0x110>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <MX_TIM1_Init+0x110>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_TIM1_Init+0x110>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c6:	482c      	ldr	r0, [pc, #176]	; (8001478 <MX_TIM1_Init+0x110>)
 80013c8:	f004 fc87 	bl	8005cda <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013d2:	f000 f9dd 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d6:	2320      	movs	r3, #32
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_TIM1_Init+0x110>)
 80013ea:	f005 fba7 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f4:	f000 f9cc 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f8:	2360      	movs	r3, #96	; 0x60
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	4816      	ldr	r0, [pc, #88]	; (8001478 <MX_TIM1_Init+0x110>)
 800141e:	f004 febb 	bl	8006198 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001428:	f000 f9b2 	bl	8001790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM1_Init+0x110>)
 8001462:	f005 fbf3 	bl	8006c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800146c:	f000 f990 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3758      	adds	r7, #88	; 0x58
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000570 	.word	0x20000570
 800147c:	40012c00 	.word	0x40012c00

08001480 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM7_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_TIM7_Init+0x78>)
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_TIM7_Init+0x7c>)
 8001494:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 50000;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM7_Init+0x78>)
 8001498:	f24c 3250 	movw	r2, #50000	; 0xc350
 800149c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 32000;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014a6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80014aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014b4:	f004 fabe 	bl	8005a34 <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80014be:	f000 f967 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014d0:	f005 fb34 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80014da:	f000 f959 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f06f 0201 	mvn.w	r2, #1
 80014e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim7);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM7_Init+0x78>)
 80014ea:	f004 fb57 	bl	8005b9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200005bc 	.word	0x200005bc
 80014fc:	40001400 	.word	0x40001400

08001500 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM16_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	HAL_TIM_Base_DeInit(&htim16);
 8001504:	4815      	ldr	r0, [pc, #84]	; (800155c <MX_TIM16_Init+0x5c>)
 8001506:	f004 faec 	bl	8005ae2 <HAL_TIM_Base_DeInit>
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_TIM16_Init+0x5c>)
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <MX_TIM16_Init+0x60>)
 800150e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_TIM16_Init+0x5c>)
 8001512:	2209      	movs	r2, #9
 8001514:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_TIM16_Init+0x5c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 56000;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_TIM16_Init+0x5c>)
 800151e:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 8001522:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_TIM16_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_TIM16_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_TIM16_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <MX_TIM16_Init+0x5c>)
 8001538:	f004 fa7c 	bl	8005a34 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM16_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f925 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <MX_TIM16_Init+0x5c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0201 	mvn.w	r2, #1
 800154e:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim16);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <MX_TIM16_Init+0x5c>)
 8001552:	f004 fb23 	bl	8005b9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000608 	.word	0x20000608
 8001560:	40014400 	.word	0x40014400

08001564 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM17_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */
		HAL_TIM_Base_DeInit(&htim17);
 8001568:	4815      	ldr	r0, [pc, #84]	; (80015c0 <MX_TIM17_Init+0x5c>)
 800156a:	f004 faba 	bl	8005ae2 <HAL_TIM_Base_DeInit>
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_TIM17_Init+0x5c>)
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <MX_TIM17_Init+0x60>)
 8001572:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5000;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_TIM17_Init+0x5c>)
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_TIM17_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 320;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_TIM17_Init+0x5c>)
 8001584:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001588:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_TIM17_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_TIM17_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_TIM17_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <MX_TIM17_Init+0x5c>)
 800159e:	f004 fa49 	bl	8005a34 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM17_Init+0x48>
  {
    Error_Handler();
 80015a8:	f000 f8f2 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim17, TIM_FLAG_UPDATE);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <MX_TIM17_Init+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0201 	mvn.w	r2, #1
 80015b4:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim17);
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <MX_TIM17_Init+0x5c>)
 80015b8:	f004 faf0 	bl	8005b9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM17_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000654 	.word	0x20000654
 80015c4:	40014800 	.word	0x40014800

080015c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <MX_USART1_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART1_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART1_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART1_UART_Init+0x58>)
 800160c:	f005 fbba 	bl	8006d84 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 f8bb 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200006a0 	.word	0x200006a0
 8001624:	40013800 	.word	0x40013800

08001628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <MX_USART2_UART_Init+0x5c>)
 8001630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800166c:	f005 fb8a 	bl	8006d84 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 f88b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000728 	.word	0x20000728
 8001684:	40004400 	.word	0x40004400

08001688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_DMA_Init+0x38>)
 8001690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <MX_DMA_Init+0x38>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6493      	str	r3, [r2, #72]	; 0x48
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_DMA_Init+0x38>)
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200d      	movs	r0, #13
 80016ac:	f002 f8b9 	bl	8003822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016b0:	200d      	movs	r0, #13
 80016b2:	f002 f8d2 	bl	800385a <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <MX_GPIO_Init+0xc4>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a2a      	ldr	r2, [pc, #168]	; (8001788 <MX_GPIO_Init+0xc4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <MX_GPIO_Init+0xc4>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <MX_GPIO_Init+0xc4>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <MX_GPIO_Init+0xc4>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_GPIO_Init+0xc4>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2120      	movs	r1, #32
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f002 fe3f 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0xc8>)
 800175e:	f002 fc87 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001762:	2320      	movs	r3, #32
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f002 fc78 	bl	8004070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	48000800 	.word	0x48000800

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <data_array>:

uint16_t Rx_MB_Address;  								//Rx Query address
uint16_t Rx_MB_length;  								//Rx Query length

void data_array(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	unsigned int x;
	for(x = 0; x < 1024; x++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e00e      	b.n	80017c6 <data_array+0x2a>
	{
		input_register[x] = x;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b299      	uxth	r1, r3
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <data_array+0x40>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		holding_register[x] = x;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	b299      	uxth	r1, r3
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <data_array+0x44>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(x = 0; x < 1024; x++)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017cc:	d3ec      	bcc.n	80017a8 <data_array+0xc>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200008d0 	.word	0x200008d0
 80017e0:	200010d0 	.word	0x200010d0

080017e4 <BP35C5_process>:


void BP35C5_process(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	BP35C5_Send_Response();
 80017e8:	f000 f802 	bl	80017f0 <BP35C5_Send_Response>
//	BP35C5_Receive_Query();
//	BP35C5_Valid_Response();
//	BP35C5_NoResponse();
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <BP35C5_Send_Response>:

void BP35C5_Send_Response(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if(BP35C5_SendResponse_Flag == 1)
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <BP35C5_Send_Response+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <BP35C5_Send_Response+0x1a>
	{
		BP35C5_SendResponse_Flag = 0;
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <BP35C5_Send_Response+0x20>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
		BP35C5_SendResponse_process(Tx_MB_address,Tx_MB_length);
 8001802:	210a      	movs	r1, #10
 8001804:	200f      	movs	r0, #15
 8001806:	f000 f805 	bl	8001814 <BP35C5_SendResponse_process>
	}
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200008cd 	.word	0x200008cd

08001814 <BP35C5_SendResponse_process>:

void BP35C5_SendResponse_process(uint16_t address,uint16_t length)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	4613      	mov	r3, r2
 8001822:	80bb      	strh	r3, [r7, #4]
	unsigned int fl_index,fl_offset = 12;
 8001824:	230c      	movs	r3, #12
 8001826:	60bb      	str	r3, [r7, #8]

	array_U8bit.byte.Data = Slave_ID;					//copy 8bit slave ID
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
	coded_hex[0] = array_U8bit.byte.bit.MSB;
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 800183c:	701a      	strb	r2, [r3, #0]
	coded_hex[1] = array_U8bit.byte.bit.LSB;
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 800184c:	705a      	strb	r2, [r3, #1]

	array_U8bit.byte.Data = c_SM_F04;					//copy 8bit function code
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 8001850:	2204      	movs	r2, #4
 8001852:	701a      	strb	r2, [r3, #0]
	coded_hex[2] = array_U8bit.byte.bit.MSB;
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001862:	709a      	strb	r2, [r3, #2]
	coded_hex[3] = array_U8bit.byte.bit.LSB;
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <BP35C5_SendResponse_process+0x17c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b48      	ldr	r3, [pc, #288]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001872:	70da      	strb	r2, [r3, #3]

	array_U16bit.byte.Data = address;				//copy 16bit Address
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	8013      	strh	r3, [r2, #0]
	coded_hex[4] = array_U16bit.byte.bit.MSB2;
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4b43      	ldr	r3, [pc, #268]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001888:	711a      	strb	r2, [r3, #4]
	coded_hex[5] = array_U16bit.byte.bit.MSB1;
 800188a:	4b43      	ldr	r3, [pc, #268]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001898:	715a      	strb	r2, [r3, #5]
	coded_hex[6] = array_U16bit.byte.bit.LSB2;
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018a8:	719a      	strb	r2, [r3, #6]
	coded_hex[7] = array_U16bit.byte.bit.LSB1;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018b8:	71da      	strb	r2, [r3, #7]

	array_U16bit.byte.Data = length;				//copy 16bit length
 80018ba:	4a37      	ldr	r2, [pc, #220]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	8013      	strh	r3, [r2, #0]
	coded_hex[8] = array_U16bit.byte.bit.MSB2;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018ce:	721a      	strb	r2, [r3, #8]
	coded_hex[9] = array_U16bit.byte.bit.MSB1;
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018de:	725a      	strb	r2, [r3, #9]
	coded_hex[10] = array_U16bit.byte.bit.LSB2;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018ee:	729a      	strb	r2, [r3, #10]
	coded_hex[11] = array_U16bit.byte.bit.LSB1;
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 80018fe:	72da      	strb	r2, [r3, #11]

	for(fl_index = address; fl_index < (address+length); fl_index++)
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e030      	b.n	8001968 <BP35C5_SendResponse_process+0x154>
	{
		array_U16bit.byte.Data = input_register[fl_index];				//convert 16bit data to 4 bit data
 8001906:	4a25      	ldr	r2, [pc, #148]	; (800199c <BP35C5_SendResponse_process+0x188>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 8001910:	801a      	strh	r2, [r3, #0]
		coded_hex[fl_offset++] = array_U16bit.byte.bit.MSB2;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 8001914:	785b      	ldrb	r3, [r3, #1]
 8001916:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800191a:	b2d9      	uxtb	r1, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001924:	54d1      	strb	r1, [r2, r3]
		coded_hex[fl_offset++] = array_U16bit.byte.bit.MSB1;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800192e:	b2d9      	uxtb	r1, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001938:	54d1      	strb	r1, [r2, r3]
		coded_hex[fl_offset++] = array_U16bit.byte.bit.LSB2;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001942:	b2d9      	uxtb	r1, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 800194c:	54d1      	strb	r1, [r2, r3]
		coded_hex[fl_offset++] = array_U16bit.byte.bit.LSB1;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <BP35C5_SendResponse_process+0x184>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001956:	b2d9      	uxtb	r1, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <BP35C5_SendResponse_process+0x180>)
 8001960:	54d1      	strb	r1, [r2, r3]
	for(fl_index = address; fl_index < (address+length); fl_index++)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4293      	cmp	r3, r2
 8001974:	d3c7      	bcc.n	8001906 <BP35C5_SendResponse_process+0xf2>
	}
	hex_2_ASCII(fl_offset);
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 f85e 	bl	8001a38 <hex_2_ASCII>
	tx_index = fl_offset;
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <BP35C5_SendResponse_process+0x18c>)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	6013      	str	r3, [r2, #0]
	BP35C5_tx_Response_F04();
 8001982:	f000 f80f 	bl	80019a4 <BP35C5_tx_Response_F04>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200008cc 	.word	0x200008cc
 8001994:	200018d0 	.word	0x200018d0
 8001998:	200008c8 	.word	0x200008c8
 800199c:	200008d0 	.word	0x200008d0
 80019a0:	20001b5c 	.word	0x20001b5c

080019a4 <BP35C5_tx_Response_F04>:
		tx_index = fl_offset;
		BP35C5_tx_Response_F04();
}

void BP35C5_tx_Response_F04(void)			//Read input register
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	unsigned int fl_index, fl_index2;
	for(fl_index = 0; fl_index < 18; fl_index++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e00b      	b.n	80019c8 <BP35C5_tx_Response_F04+0x24>
	{
		BP35C5_Outbox[fl_index] = Tx_frame[fl_index];				//copy TCP tx command
 80019b0:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <BP35C5_tx_Response_F04+0x80>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	7819      	ldrb	r1, [r3, #0]
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <BP35C5_tx_Response_F04+0x84>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	460a      	mov	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
	for(fl_index = 0; fl_index < 18; fl_index++)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3301      	adds	r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b11      	cmp	r3, #17
 80019cc:	d9f0      	bls.n	80019b0 <BP35C5_tx_Response_F04+0xc>
	}
	for(fl_index2 = 0; fl_index2 < tx_index; fl_index2++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	e00b      	b.n	80019ec <BP35C5_tx_Response_F04+0x48>
	{
		BP35C5_Outbox[fl_index++] = Tx_ASCII_string[fl_index2];		//copy tx data
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	4914      	ldr	r1, [pc, #80]	; (8001a2c <BP35C5_tx_Response_F04+0x88>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	440a      	add	r2, r1
 80019e0:	7811      	ldrb	r1, [r2, #0]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <BP35C5_tx_Response_F04+0x84>)
 80019e4:	54d1      	strb	r1, [r2, r3]
	for(fl_index2 = 0; fl_index2 < tx_index; fl_index2++)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <BP35C5_tx_Response_F04+0x8c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3ee      	bcc.n	80019d4 <BP35C5_tx_Response_F04+0x30>
	}
	BP35C5_Outbox[fl_index++] = 0xd;								//copy carriage return("\r")
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <BP35C5_tx_Response_F04+0x84>)
 80019fe:	210d      	movs	r1, #13
 8001a00:	54d1      	strb	r1, [r2, r3]
	BP35C5_Outbox[fl_index++] = 0xa;								//copy line feed("\n")
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <BP35C5_tx_Response_F04+0x84>)
 8001a0a:	210a      	movs	r1, #10
 8001a0c:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)BP35C5_Outbox, fl_index);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	4904      	ldr	r1, [pc, #16]	; (8001a28 <BP35C5_tx_Response_F04+0x84>)
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <BP35C5_tx_Response_F04+0x90>)
 8001a18:	f005 fa02 	bl	8006e20 <HAL_UART_Transmit_IT>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20001968 	.word	0x20001968
 8001a2c:	20001b60 	.word	0x20001b60
 8001a30:	20001b5c 	.word	0x20001b5c
 8001a34:	200006a0 	.word	0x200006a0

08001a38 <hex_2_ASCII>:
	}
	return t;
}

void hex_2_ASCII(unsigned int len)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	unsigned int index;
	for(index = 0; index < len; index++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e02b      	b.n	8001a9e <hex_2_ASCII+0x66>
	{
		if(coded_hex[index] <= 0x9)
 8001a46:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <hex_2_ASCII+0x7c>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d80b      	bhi.n	8001a6a <hex_2_ASCII+0x32>
		{
			Tx_ASCII_string[index] = coded_hex[index] + '0';
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <hex_2_ASCII+0x7c>)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3330      	adds	r3, #48	; 0x30
 8001a5c:	b2d9      	uxtb	r1, r3
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <hex_2_ASCII+0x80>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	460a      	mov	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e016      	b.n	8001a98 <hex_2_ASCII+0x60>
		}
		else if((coded_hex[index] >= 0xa) && (coded_hex[index] <= 0xf))
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <hex_2_ASCII+0x7c>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	d910      	bls.n	8001a98 <hex_2_ASCII+0x60>
 8001a76:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <hex_2_ASCII+0x7c>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	d80a      	bhi.n	8001a98 <hex_2_ASCII+0x60>
		{
			Tx_ASCII_string[index] = coded_hex[index] + 'W';
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <hex_2_ASCII+0x7c>)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3357      	adds	r3, #87	; 0x57
 8001a8c:	b2d9      	uxtb	r1, r3
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <hex_2_ASCII+0x80>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	460a      	mov	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
	for(index = 0; index < len; index++)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3cf      	bcc.n	8001a46 <hex_2_ASCII+0xe>
		}
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200018d0 	.word	0x200018d0
 8001ab8:	20001b60 	.word	0x20001b60

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_MspInit+0x50>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_MspInit+0x50>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_MspInit+0x50>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_MspInit+0x50>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_MspInit+0x50>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_MspInit+0x50>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2101      	movs	r1, #1
 8001af6:	2004      	movs	r0, #4
 8001af8:	f001 fe93 	bl	8003822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001afc:	2004      	movs	r0, #4
 8001afe:	f001 feac 	bl	800385a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ac      	sub	sp, #176	; 0xb0
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2288      	movs	r2, #136	; 0x88
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f007 fdbf 	bl	80096b4 <memset>
  if(hadc->Instance==ADC3)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d171      	bne.n	8001c24 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b56:	2308      	movs	r3, #8
 8001b58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 faa3 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b7c:	f7ff fe08 	bl	8001790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001b86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_ADC_MspInit+0x120>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bb6:	230b      	movs	r3, #11
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481a      	ldr	r0, [pc, #104]	; (8001c34 <HAL_ADC_MspInit+0x124>)
 8001bca:	f002 fa51 	bl	8004070 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_ADC_MspInit+0x12c>)
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c0a:	f001 fe4f 	bl	80038ac <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001c14:	f7ff fdbc 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	37b0      	adds	r7, #176	; 0xb0
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	50040200 	.word	0x50040200
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000800 	.word	0x48000800
 8001c38:	20000528 	.word	0x20000528
 8001c3c:	40020030 	.word	0x40020030

08001c40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_TIM_PWM_MspInit+0x54>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11b      	bne.n	8001c8a <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_TIM_PWM_MspInit+0x58>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_TIM_PWM_MspInit+0x58>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_TIM_PWM_MspInit+0x58>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f001 fdd7 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c74:	2019      	movs	r0, #25
 8001c76:	f001 fdf0 	bl	800385a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201a      	movs	r0, #26
 8001c80:	f001 fdcf 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c84:	201a      	movs	r0, #26
 8001c86:	f001 fde8 	bl	800385a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_TIM_Base_MspInit+0xac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d114      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2037      	movs	r0, #55	; 0x37
 8001ccc:	f001 fda9 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd0:	2037      	movs	r0, #55	; 0x37
 8001cd2:	f001 fdc2 	bl	800385a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001cd6:	e032      	b.n	8001d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_TIM_Base_MspInit+0xb4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d114      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2019      	movs	r0, #25
 8001d00:	f001 fd8f 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d04:	2019      	movs	r0, #25
 8001d06:	f001 fda8 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 8001d0a:	e018      	b.n	8001d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_TIM_Base_MspInit+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d113      	bne.n	8001d3e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6613      	str	r3, [r2, #96]	; 0x60
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_TIM_Base_MspInit+0xb0>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	201a      	movs	r0, #26
 8001d34:	f001 fd75 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d38:	201a      	movs	r0, #26
 8001d3a:	f001 fd8e 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40001400 	.word	0x40001400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40014400 	.word	0x40014400
 8001d54:	40014800 	.word	0x40014800

08001d58 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_TIM_Base_MspDeInit+0x5c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d109      	bne.n	8001d7e <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM7_MspDeInit 0 */

  /* USER CODE END TIM7_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM7_CLK_DISABLE();
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001d70:	f023 0320 	bic.w	r3, r3, #32
 8001d74:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM7 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8001d76:	2037      	movs	r0, #55	; 0x37
 8001d78:	f001 fd7d 	bl	8003876 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 8001d7c:	e016      	b.n	8001dac <HAL_TIM_Base_MspDeInit+0x54>
  else if(htim_base->Instance==TIM16)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_TIM_Base_MspDeInit+0x64>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d106      	bne.n	8001d96 <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001d8e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d92:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001d94:	e00a      	b.n	8001dac <HAL_TIM_Base_MspDeInit+0x54>
  else if(htim_base->Instance==TIM17)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_TIM_Base_MspDeInit+0x68>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d105      	bne.n	8001dac <HAL_TIM_Base_MspDeInit+0x54>
    __HAL_RCC_TIM17_CLK_DISABLE();
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_TIM_Base_MspDeInit+0x60>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40001400 	.word	0x40001400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0ae      	sub	sp, #184	; 0xb8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	2288      	movs	r2, #136	; 0x88
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f007 fc65 	bl	80096b4 <memset>
  if(huart->Instance==USART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4b      	ldr	r2, [pc, #300]	; (8001f1c <HAL_UART_MspInit+0x158>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d145      	bne.n	8001e80 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 f95b 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e0c:	f7ff fcc0 	bl	8001790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	4a42      	ldr	r2, [pc, #264]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6a:	f002 f901 	bl	8004070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2025      	movs	r0, #37	; 0x25
 8001e74:	f001 fcd5 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e78:	2025      	movs	r0, #37	; 0x25
 8001e7a:	f001 fcee 	bl	800385a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e7e:	e048      	b.n	8001f12 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_UART_MspInit+0x160>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d143      	bne.n	8001f12 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 f910 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001ea2:	f7ff fc75 	bl	8001790 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_UART_MspInit+0x15c>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f002 f8b7 	bl	8004070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2026      	movs	r0, #38	; 0x26
 8001f08:	f001 fc8b 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0c:	2026      	movs	r0, #38	; 0x26
 8001f0e:	f001 fca4 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	37b8      	adds	r7, #184	; 0xb8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40004400 	.word	0x40004400

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f74:	f000 fa34 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001f80:	f001 ff0a 	bl	8003d98 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Channel3_IRQHandler+0x10>)
 8001f8e:	f001 fe24 	bl	8003bda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000528 	.word	0x20000528

08001f9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001fa2:	f003 fff7 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001fa8:	f003 fff4 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000570 	.word	0x20000570
 8001fb4:	20000608 	.word	0x20000608

08001fb8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001fbe:	f003 ffe9 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001fc2:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001fc4:	f003 ffe6 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000570 	.word	0x20000570
 8001fd0:	20000654 	.word	0x20000654

08001fd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USART1_IRQHandler+0x10>)
 8001fda:	f004 ffcb 	bl	8006f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200006a0 	.word	0x200006a0

08001fe8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM7_IRQHandler+0x10>)
 8001fee:	f003 ffd1 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200005bc 	.word	0x200005bc

08001ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <vmm_process>:
void perform_fft(void);
void FFT_initialization(void);


void vmm_process(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	if(gl_ADC_samplingConv_Cmplt_flag == 1)
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <vmm_process+0x34>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d110      	bne.n	800204e <vmm_process+0x2e>
	{
		gl_ADC_samplingConv_Cmplt_flag = 0;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <vmm_process+0x34>)
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
		DC_offset = VMM_RemoveDC();
 8002032:	f000 f815 	bl	8002060 <VMM_RemoveDC>
 8002036:	eef0 7a40 	vmov.f32	s15, s0
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <vmm_process+0x38>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
		final_VRMS = VMM_rms();
 8002040:	f000 f86c 	bl	800211c <VMM_rms>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <vmm_process+0x3c>)
 800204a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20001c42 	.word	0x20001c42
 8002058:	20007c44 	.word	0x20007c44
 800205c:	20007c48 	.word	0x20007c48

08002060 <VMM_RemoveDC>:
//	}
//}

/* Remove DC Component */
float VMM_RemoveDC(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
	unsigned short fl_i;
	uint32_t DC_avg;
	uint32_t fl_dc_sum = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
	float final_DC = 0;
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	607b      	str	r3, [r7, #4]

	for(fl_i = 0; fl_i < ADC_sampling_length; fl_i++)
 8002070:	2300      	movs	r3, #0
 8002072:	81fb      	strh	r3, [r7, #14]
 8002074:	e00a      	b.n	800208c <VMM_RemoveDC+0x2c>
	{
		fl_dc_sum = fl_dc_sum + ADC_Data[fl_i];
 8002076:	89fb      	ldrh	r3, [r7, #14]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <VMM_RemoveDC+0xb0>)
 800207a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	60bb      	str	r3, [r7, #8]
	for(fl_i = 0; fl_i < ADC_sampling_length; fl_i++)
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	3301      	adds	r3, #1
 800208a:	81fb      	strh	r3, [r7, #14]
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d3f0      	bcc.n	8002076 <VMM_RemoveDC+0x16>
	}

	DC_avg = (fl_dc_sum/ADC_sampling_length);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0b1b      	lsrs	r3, r3, #12
 8002098:	603b      	str	r3, [r7, #0]
	final_DC = ((DC_avg * 3.3)/4096);
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f7fe f9d6 	bl	800044c <__aeabi_ui2d>
 80020a0:	a319      	add	r3, pc, #100	; (adr r3, 8002108 <VMM_RemoveDC+0xa8>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa4b 	bl	8000540 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <VMM_RemoveDC+0xb4>)
 80020b8:	f7fe fb6c 	bl	8000794 <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fcec 	bl	8000aa0 <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	607b      	str	r3, [r7, #4]

	for(fl_i = 0; fl_i < ADC_sampling_length; fl_i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	81fb      	strh	r3, [r7, #14]
 80020d0:	e00e      	b.n	80020f0 <VMM_RemoveDC+0x90>
	{
		AC_average[fl_i] =  DC_avg - ADC_Data[fl_i];
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <VMM_RemoveDC+0xb0>)
 80020d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1a9a      	subs	r2, r3, r2
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <VMM_RemoveDC+0xb8>)
 80020e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(fl_i = 0; fl_i < ADC_sampling_length; fl_i++)
 80020ea:	89fb      	ldrh	r3, [r7, #14]
 80020ec:	3301      	adds	r3, #1
 80020ee:	81fb      	strh	r3, [r7, #14]
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f6:	d3ec      	bcc.n	80020d2 <VMM_RemoveDC+0x72>
	}
	return final_DC;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	ee07 3a90 	vmov	s15, r3
}
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	66666666 	.word	0x66666666
 800210c:	400a6666 	.word	0x400a6666
 8002110:	20001c44 	.word	0x20001c44
 8002114:	40b00000 	.word	0x40b00000
 8002118:	20003c44 	.word	0x20003c44

0800211c <VMM_rms>:

/* calculate RMS */
float VMM_rms(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
	unsigned short fl_j;
	float total_ADC_value = 0;
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
	float Avg_voltage;
	float fl_temp,fl_rms;

	for(fl_j = 0; fl_j < ADC_sampling_length; fl_j++)
 8002128:	2300      	movs	r3, #0
 800212a:	82fb      	strh	r3, [r7, #22]
 800212c:	e021      	b.n	8002172 <VMM_rms+0x56>
	{
		fl_temp = AC_average[fl_j] * Vbitvalue;
 800212e:	8afb      	ldrh	r3, [r7, #22]
 8002130:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <VMM_rms+0xa4>)
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <VMM_rms+0xa8>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a01 	vstr	s15, [r7, #4]
		fft_input_buffer[fl_j] = fl_temp;
 800214c:	8afb      	ldrh	r3, [r7, #22]
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <VMM_rms+0xac>)
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	601a      	str	r2, [r3, #0]
		total_ADC_value = (fl_temp * fl_temp) + total_ADC_value;
 8002158:	edd7 7a01 	vldr	s15, [r7, #4]
 800215c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002160:	ed97 7a04 	vldr	s14, [r7, #16]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	edc7 7a04 	vstr	s15, [r7, #16]
	for(fl_j = 0; fl_j < ADC_sampling_length; fl_j++)
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	3301      	adds	r3, #1
 8002170:	82fb      	strh	r3, [r7, #22]
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002178:	d3d9      	bcc.n	800212e <VMM_rms+0x12>
	}

	Avg_voltage = total_ADC_value/ADC_sampling_length;
 800217a:	ed97 7a04 	vldr	s14, [r7, #16]
 800217e:	eddf 6a13 	vldr	s13, [pc, #76]	; 80021cc <VMM_rms+0xb0>
 8002182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002186:	edc7 7a03 	vstr	s15, [r7, #12]
	fl_rms = sqrt(Avg_voltage);
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7fe f980 	bl	8000490 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	ec43 2b10 	vmov	d0, r2, r3
 8002198:	f007 fabe 	bl	8009718 <sqrt>
 800219c:	ec53 2b10 	vmov	r2, r3, d0
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fc7c 	bl	8000aa0 <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
 80021aa:	60bb      	str	r3, [r7, #8]

	perform_fft();
 80021ac:	f000 f828 	bl	8002200 <perform_fft>

	return fl_rms;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	ee07 3a90 	vmov	s15, r3
}
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20003c44 	.word	0x20003c44
 80021c4:	20000018 	.word	0x20000018
 80021c8:	10000000 	.word	0x10000000
 80021cc:	45800000 	.word	0x45800000

080021d0 <FFT_initialization>:

void FFT_initialization(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	fft_status = arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <FFT_initialization+0x28>)
 80021da:	f006 fae9 	bl	80087b0 <arm_rfft_fast_init_f32>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <FFT_initialization+0x2c>)
 80021e4:	701a      	strb	r2, [r3, #0]

	if (fft_status != ARM_MATH_SUCCESS)
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <FFT_initialization+0x2c>)
 80021e8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d000      	beq.n	80021f2 <FFT_initialization+0x22>
	{
		// FFT initialization failed, handle the error
		while (1)
 80021f0:	e7fe      	b.n	80021f0 <FFT_initialization+0x20>
		{
			// Error handling...
		}
	}
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20001c28 	.word	0x20001c28
 80021fc:	20001c40 	.word	0x20001c40

08002200 <perform_fft>:

// Perform the FFT
void perform_fft(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&fft_instance, fft_input_buffer, fft_output_buffer, 0);
 8002206:	2300      	movs	r3, #0
 8002208:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <perform_fft+0xb8>)
 800220a:	492c      	ldr	r1, [pc, #176]	; (80022bc <perform_fft+0xbc>)
 800220c:	482c      	ldr	r0, [pc, #176]	; (80022c0 <perform_fft+0xc0>)
 800220e:	f006 fbb3 	bl	8008978 <arm_rfft_fast_f32>

  // Visualize the results (you can customize this part as needed)
  for (int i = 0; i < FFT_SIZE / 2; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e02b      	b.n	8002270 <perform_fft+0x70>
  {
	float32_t real = fft_output_buffer[i * 2];
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <perform_fft+0xb8>)
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	607b      	str	r3, [r7, #4]
	float32_t imag = fft_output_buffer[i * 2 + 1];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	3301      	adds	r3, #1
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <perform_fft+0xb8>)
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	603b      	str	r3, [r7, #0]
	magnitude = sqrtf(real * real + imag * imag);
 8002236:	edd7 7a01 	vldr	s15, [r7, #4]
 800223a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800223e:	edd7 7a00 	vldr	s15, [r7]
 8002242:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224a:	eeb0 0a67 	vmov.f32	s0, s15
 800224e:	f007 fa8f 	bl	8009770 <sqrtf>
 8002252:	eef0 7a40 	vmov.f32	s15, s0
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <perform_fft+0xc4>)
 8002258:	edc3 7a00 	vstr	s15, [r3]
	FFT[i] = magnitude;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <perform_fft+0xc4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <perform_fft+0xc8>)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < FFT_SIZE / 2; i++)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3301      	adds	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002276:	dbcf      	blt.n	8002218 <perform_fft+0x18>
  }

  for(int fl_m=0; fl_m < FFT_SIZE; fl_m++)
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	e013      	b.n	80022a6 <perform_fft+0xa6>
  {
  	FFT_VALUE = FFT[fl_m];
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <perform_fft+0xc8>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a10      	ldr	r2, [pc, #64]	; (80022cc <perform_fft+0xcc>)
 800228a:	6013      	str	r3, [r2, #0]
  	FFT_INPUT = FFT_VALUE * 10;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <perform_fft+0xcc>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <perform_fft+0xd0>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
  for(int fl_m=0; fl_m < FFT_SIZE; fl_m++)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3301      	adds	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ac:	dbe7      	blt.n	800227e <perform_fft+0x7e>
//  MB1_InputRegisters[fl_m] = FFT_INPUT;				//LSB
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	10004000 	.word	0x10004000
 80022bc:	10000000 	.word	0x10000000
 80022c0:	20001c28 	.word	0x20001c28
 80022c4:	20007c4c 	.word	0x20007c4c
 80022c8:	20007c58 	.word	0x20007c58
 80022cc:	20007c50 	.word	0x20007c50
 80022d0:	20007c54 	.word	0x20007c54

080022d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800230c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d8:	f7ff fe90 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <LoopForever+0x6>)
  ldr r1, =_edata
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <LoopForever+0xe>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <LoopForever+0x16>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f007 f9e5 	bl	80096d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002306:	f7fe ff3b 	bl	8001180 <main>

0800230a <LoopForever>:

LoopForever:
    b LoopForever
 800230a:	e7fe      	b.n	800230a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800230c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002318:	0801c9c0 	.word	0x0801c9c0
  ldr r2, =_sbss
 800231c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002320:	20009d94 	.word	0x20009d94

08002324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_2_IRQHandler>
	...

08002328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_Init+0x3c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_Init+0x3c>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233e:	2003      	movs	r0, #3
 8002340:	f001 fa64 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002344:	2000      	movs	r0, #0
 8002346:	f000 f80f 	bl	8002368 <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	e001      	b.n	800235a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002356:	f7ff fbb1 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800235a:	79fb      	ldrb	r3, [r7, #7]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_InitTick+0x6c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d023      	beq.n	80023c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_InitTick+0x70>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_InitTick+0x6c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238a:	fbb3 f3f1 	udiv	r3, r3, r1
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fa7d 	bl	8003892 <HAL_SYSTICK_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d809      	bhi.n	80023b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f001 fa39 	bl	8003822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_InitTick+0x74>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e007      	b.n	80023c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e004      	b.n	80023c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e001      	b.n	80023c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000020 	.word	0x20000020
 80023d8:	20000014 	.word	0x20000014
 80023dc:	2000001c 	.word	0x2000001c

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000020 	.word	0x20000020
 8002404:	20009c58 	.word	0x20009c58

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20009c58 	.word	0x20009c58

08002420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	609a      	str	r2, [r3, #8]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3360      	adds	r3, #96	; 0x60
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_ADC_SetOffset+0x44>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	03fff000 	.word	0x03fff000

080024d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3360      	adds	r3, #96	; 0x60
 80024de:	461a      	mov	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3360      	adds	r3, #96	; 0x60
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	431a      	orrs	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3330      	adds	r3, #48	; 0x30
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	211f      	movs	r1, #31
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 011f 	and.w	r1, r3, #31
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	431a      	orrs	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3314      	adds	r3, #20
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0e5b      	lsrs	r3, r3, #25
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	0d1b      	lsrs	r3, r3, #20
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2107      	movs	r1, #7
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	401a      	ands	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0d1b      	lsrs	r3, r3, #20
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0318 	and.w	r3, r3, #24
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <LL_ADC_SetChannelSingleDiff+0x44>)
 800262c:	40d9      	lsrs	r1, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	400b      	ands	r3, r1
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	0007ffff 	.word	0x0007ffff

08002650 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800267c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d101      	bne.n	80026aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f4:	d101      	bne.n	80026fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <LL_ADC_IsEnabled+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_ADC_IsEnabled+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002766:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d101      	bne.n	8002796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d101      	bne.n	80027bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e130      	b.n	8002a48 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff f98b 	bl	8001b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff3f 	bl	8002690 <LL_ADC_IsDeepPowerDownEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff25 	bl	800266c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff5a 	bl	80026e0 <LL_ADC_IsInternalRegulatorEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff3e 	bl	80026b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <HAL_ADC_Init+0x284>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	4a84      	ldr	r2, [pc, #528]	; (8002a54 <HAL_ADC_Init+0x288>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002850:	e002      	b.n	8002858 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3b01      	subs	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff3c 	bl	80026e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff75 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 8002894:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80c9 	bne.w	8002a36 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80c5 	bne.w	8002a36 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028b4:	f043 0202 	orr.w	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff35 	bl	8002730 <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d115      	bne.n	80028f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028cc:	4862      	ldr	r0, [pc, #392]	; (8002a58 <HAL_ADC_Init+0x28c>)
 80028ce:	f7ff ff2f 	bl	8002730 <LL_ADC_IsEnabled>
 80028d2:	4604      	mov	r4, r0
 80028d4:	4861      	ldr	r0, [pc, #388]	; (8002a5c <HAL_ADC_Init+0x290>)
 80028d6:	f7ff ff2b 	bl	8002730 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	431c      	orrs	r4, r3
 80028de:	4860      	ldr	r0, [pc, #384]	; (8002a60 <HAL_ADC_Init+0x294>)
 80028e0:	f7ff ff26 	bl	8002730 <LL_ADC_IsEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4323      	orrs	r3, r4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4619      	mov	r1, r3
 80028f2:	485c      	ldr	r0, [pc, #368]	; (8002a64 <HAL_ADC_Init+0x298>)
 80028f4:	f7ff fd94 	bl	8002420 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e5b      	ldrb	r3, [r3, #25]
 80028fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002902:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002908:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800290e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002916:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	045b      	lsls	r3, r3, #17
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_ADC_Init+0x29c>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	430b      	orrs	r3, r1
 8002962:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff1b 	bl	80027a4 <LL_ADC_INJ_IsConversionOngoing>
 800296e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d13d      	bne.n	80029f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13a      	bne.n	80029f2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002980:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002988:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	430b      	orrs	r3, r1
 80029a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d118      	bne.n	80029e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d2:	430a      	orrs	r2, r1
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	e007      	b.n	80029f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10c      	bne.n	8002a14 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f023 010f 	bic.w	r1, r3, #15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	e007      	b.n	8002a24 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020f 	bic.w	r2, r2, #15
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f023 0303 	bic.w	r3, r3, #3
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
 8002a34:	e007      	b.n	8002a46 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3724      	adds	r7, #36	; 0x24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	20000014 	.word	0x20000014
 8002a54:	053e2d63 	.word	0x053e2d63
 8002a58:	50040000 	.word	0x50040000
 8002a5c:	50040100 	.word	0x50040100
 8002a60:	50040200 	.word	0x50040200
 8002a64:	50040300 	.word	0x50040300
 8002a68:	fff0c007 	.word	0xfff0c007

08002a6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a78:	4853      	ldr	r0, [pc, #332]	; (8002bc8 <HAL_ADC_Start_DMA+0x15c>)
 8002a7a:	f7ff fde9 	bl	8002650 <LL_ADC_GetMultimode>
 8002a7e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe7a 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 8093 	bne.w	8002bb8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_Start_DMA+0x34>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e08e      	b.n	8002bbe <HAL_ADC_Start_DMA+0x152>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a47      	ldr	r2, [pc, #284]	; (8002bcc <HAL_ADC_Start_DMA+0x160>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d008      	beq.n	8002ac4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d002      	beq.n	8002ac4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d172      	bne.n	8002baa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fc93 	bl	80033f0 <ADC_Enable>
 8002aca:	4603      	mov	r3, r0
 8002acc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d165      	bne.n	8002ba0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a38      	ldr	r2, [pc, #224]	; (8002bd0 <HAL_ADC_Start_DMA+0x164>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d002      	beq.n	8002af8 <HAL_ADC_Start_DMA+0x8c>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e000      	b.n	8002afa <HAL_ADC_Start_DMA+0x8e>
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_ADC_Start_DMA+0x168>)
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d002      	beq.n	8002b08 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f023 0206 	bic.w	r2, r3, #6
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_ADC_Start_DMA+0x16c>)
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_ADC_Start_DMA+0x170>)
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_ADC_Start_DMA+0x174>)
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	221c      	movs	r2, #28
 8002b52:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0210 	orr.w	r2, r2, #16
 8002b6a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	4619      	mov	r1, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f000 ff46 	bl	8003a1c <HAL_DMA_Start_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fddc 	bl	8002756 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b9e:	e00d      	b.n	8002bbc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ba8:	e008      	b.n	8002bbc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bb6:	e001      	b.n	8002bbc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	50040300 	.word	0x50040300
 8002bcc:	50040200 	.word	0x50040200
 8002bd0:	50040100 	.word	0x50040100
 8002bd4:	50040000 	.word	0x50040000
 8002bd8:	080034fd 	.word	0x080034fd
 8002bdc:	080035d5 	.word	0x080035d5
 8002be0:	080035f1 	.word	0x080035f1

08002be4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0b6      	sub	sp, #216	; 0xd8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x22>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e3c9      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x7b6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fd9f 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 83aa 	bne.w	800339c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d824      	bhi.n	8002ca2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	3b02      	subs	r3, #2
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d81b      	bhi.n	8002c9a <HAL_ADC_ConfigChannel+0x8e>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_ADC_ConfigChannel+0x5c>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c89 	.word	0x08002c89
 8002c74:	08002c91 	.word	0x08002c91
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c78:	230c      	movs	r3, #12
 8002c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c7e:	e010      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c80:	2312      	movs	r3, #18
 8002c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c88:	2318      	movs	r3, #24
 8002c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c8e:	e008      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ca0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002cb0:	f7ff fc52 	bl	8002558 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fd60 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fd6c 	bl	80027a4 <LL_ADC_INJ_IsConversionOngoing>
 8002ccc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 81a4 	bne.w	8003022 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 819f 	bne.w	8003022 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f7ff fc5d 	bl	80025b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00a      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6919      	ldr	r1, [r3, #16]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	f7ff fbae 	bl	8002488 <LL_ADC_SetOffset>
 8002d2c:	e179      	b.n	8003022 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fbcb 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x14e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fbc0 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	e01e      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x18c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbb5 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e004      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x1a4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	e018      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x1d6>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e004      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fb84 	bl	80024fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fb68 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x214>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fb5d 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	f003 021f 	and.w	r2, r3, #31
 8002e1e:	e01e      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x252>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb52 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e004      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x26a>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	e018      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x29c>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fb21 	bl	80024fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fb05 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x2da>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fafa 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	0e9b      	lsrs	r3, r3, #26
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	e01e      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x318>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff faef 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e004      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x330>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	e014      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x35a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e004      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fac2 	bl	80024fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff faa6 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x398>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2103      	movs	r1, #3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fa9b 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	e017      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x3c8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2103      	movs	r1, #3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fa90 	bl	80024d0 <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e003      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x3e0>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	e011      	b.n	8003010 <HAL_ADC_ConfigChannel+0x404>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003004:	2320      	movs	r3, #32
 8003006:	e003      	b.n	8003010 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fa6d 	bl	80024fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fb82 	bl	8002730 <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 8140 	bne.w	80032b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	461a      	mov	r2, r3
 8003042:	f7ff fae1 	bl	8002608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a8f      	ldr	r2, [pc, #572]	; (8003288 <HAL_ADC_ConfigChannel+0x67c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f040 8131 	bne.w	80032b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_ADC_ConfigChannel+0x46e>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2b09      	cmp	r3, #9
 8003070:	bf94      	ite	ls
 8003072:	2301      	movls	r3, #1
 8003074:	2300      	movhi	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e019      	b.n	80030ae <HAL_ADC_ConfigChannel+0x4a2>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800308c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e003      	b.n	800309e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d079      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x4c2>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	3301      	adds	r3, #1
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030cc:	e015      	b.n	80030fa <HAL_ADC_ConfigChannel+0x4ee>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030e6:	2320      	movs	r3, #32
 80030e8:	e003      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	069b      	lsls	r3, r3, #26
 80030f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_ADC_ConfigChannel+0x50e>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	3301      	adds	r3, #1
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	e017      	b.n	800314a <HAL_ADC_ConfigChannel+0x53e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e003      	b.n	800313e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	ea42 0103 	orr.w	r1, r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x564>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	051b      	lsls	r3, r3, #20
 800316e:	e018      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x596>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e003      	b.n	8003194 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a2:	430b      	orrs	r3, r1
 80031a4:	e081      	b.n	80032aa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x5b6>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	3301      	adds	r3, #1
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031c0:	e015      	b.n	80031ee <HAL_ADC_ConfigChannel+0x5e2>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	069b      	lsls	r3, r3, #26
 80031ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_ADC_ConfigChannel+0x602>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	e017      	b.n	800323e <HAL_ADC_ConfigChannel+0x632>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	61bb      	str	r3, [r7, #24]
  return result;
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e003      	b.n	8003232 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	ea42 0103 	orr.w	r1, r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_ADC_ConfigChannel+0x65e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0e9b      	lsrs	r3, r3, #26
 8003254:	3301      	adds	r3, #1
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	3b1e      	subs	r3, #30
 8003262:	051b      	lsls	r3, r3, #20
 8003264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003268:	e01e      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x69c>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	60fb      	str	r3, [r7, #12]
  return result;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e006      	b.n	8003294 <HAL_ADC_ConfigChannel+0x688>
 8003286:	bf00      	nop
 8003288:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f003 021f 	and.w	r2, r3, #31
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	3b1e      	subs	r3, #30
 80032a2:	051b      	lsls	r3, r3, #20
 80032a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7ff f97e 	bl	80025b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_ADC_ConfigChannel+0x7c0>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07a      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032c0:	4843      	ldr	r0, [pc, #268]	; (80033d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80032c2:	f7ff f8d3 	bl	800246c <LL_ADC_GetCommonPathInternalCh>
 80032c6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12c      	bne.n	800332e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d126      	bne.n	800332e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x6e8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_ADC_ConfigChannel+0x7d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d15d      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032fc:	4619      	mov	r1, r3
 80032fe:	4834      	ldr	r0, [pc, #208]	; (80033d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003300:	f7ff f8a1 	bl	8002446 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	4a36      	ldr	r2, [pc, #216]	; (80033e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800331e:	e002      	b.n	8003326 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3b01      	subs	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f9      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800332c:	e040      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d118      	bne.n	800336a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800333c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d112      	bne.n	800336a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x74c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_ADC_ConfigChannel+0x7d0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d12d      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800335c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003360:	4619      	mov	r1, r3
 8003362:	481b      	ldr	r0, [pc, #108]	; (80033d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003364:	f7ff f86f 	bl	8002446 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003368:	e024      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_ADC_ConfigChannel+0x7e0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d120      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11a      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d115      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800338a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800338e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003392:	4619      	mov	r1, r3
 8003394:	480e      	ldr	r0, [pc, #56]	; (80033d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003396:	f7ff f856 	bl	8002446 <LL_ADC_SetCommonPathInternalCh>
 800339a:	e00c      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	37d8      	adds	r7, #216	; 0xd8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	80080000 	.word	0x80080000
 80033d0:	50040300 	.word	0x50040300
 80033d4:	c7520000 	.word	0xc7520000
 80033d8:	50040000 	.word	0x50040000
 80033dc:	50040200 	.word	0x50040200
 80033e0:	20000014 	.word	0x20000014
 80033e4:	053e2d63 	.word	0x053e2d63
 80033e8:	cb840000 	.word	0xcb840000
 80033ec:	80000001 	.word	0x80000001

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f995 	bl	8002730 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d169      	bne.n	80034e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b36      	ldr	r3, [pc, #216]	; (80034ec <ADC_Enable+0xfc>)
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e055      	b.n	80034e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f964 	bl	8002708 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003440:	482b      	ldr	r0, [pc, #172]	; (80034f0 <ADC_Enable+0x100>)
 8003442:	f7ff f813 	bl	800246c <LL_ADC_GetCommonPathInternalCh>
 8003446:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <ADC_Enable+0x104>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <ADC_Enable+0x108>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3b01      	subs	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003478:	f7fe ffc6 	bl	8002408 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	e028      	b.n	80034d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f953 	bl	8002730 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f937 	bl	8002708 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800349a:	f7fe ffb5 	bl	8002408 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d914      	bls.n	80034d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d00d      	beq.n	80034d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d1cf      	bne.n	8003480 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	8000003f 	.word	0x8000003f
 80034f0:	50040300 	.word	0x50040300
 80034f4:	20000014 	.word	0x20000014
 80034f8:	053e2d63 	.word	0x053e2d63

080034fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d14b      	bne.n	80035ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d021      	beq.n	8003574 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fffc 	bl	8002532 <LL_ADC_REG_IsTriggerSourceSWStart>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d032      	beq.n	80035a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12b      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11f      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
 8003572:	e018      	b.n	80035a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d111      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7fd fdda 	bl	8001160 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ac:	e00e      	b.n	80035cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fb1c 	bl	8002bf8 <HAL_ADC_ErrorCallback>
}
 80035c0:	e004      	b.n	80035cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fafe 	bl	8002be4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff faee 	bl	8002bf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800364c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__NVIC_GetPriorityGrouping+0x18>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 0307 	and.w	r3, r3, #7
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db0b      	blt.n	80036b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <__NVIC_EnableIRQ+0x38>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2001      	movs	r0, #1
 80036aa:	fa00 f202 	lsl.w	r2, r0, r2
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db12      	blt.n	80036fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	490a      	ldr	r1, [pc, #40]	; (8003708 <__NVIC_DisableIRQ+0x44>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	3320      	adds	r3, #32
 80036ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036f0:	f3bf 8f4f 	dsb	sy
}
 80036f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036f6:	f3bf 8f6f 	isb	sy
}
 80036fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff8e 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff05 	bl	8003624 <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff1a 	bl	800366c <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff8e 	bl	8003760 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5d 	bl	800370c <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff0d 	bl	8003688 <__NVIC_EnableIRQ>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff1d 	bl	80036c4 <__NVIC_DisableIRQ>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff94 	bl	80037c8 <SysTick_Config>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e098      	b.n	80039f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_DMA_Init+0x150>)
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d80f      	bhi.n	80038ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_DMA_Init+0x154>)
 80038d2:	4413      	add	r3, r2
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_DMA_Init+0x158>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	009a      	lsls	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a48      	ldr	r2, [pc, #288]	; (8003a08 <HAL_DMA_Init+0x15c>)
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
 80038e8:	e00e      	b.n	8003908 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_DMA_Init+0x160>)
 80038f2:	4413      	add	r3, r2
 80038f4:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <HAL_DMA_Init+0x158>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	009a      	lsls	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <HAL_DMA_Init+0x164>)
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003962:	d039      	beq.n	80039d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_DMA_Init+0x15c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d11a      	bne.n	80039a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_DMA_Init+0x168>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f003 031c 	and.w	r3, r3, #28
 800397a:	210f      	movs	r1, #15
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	4924      	ldr	r1, [pc, #144]	; (8003a14 <HAL_DMA_Init+0x168>)
 8003984:	4013      	ands	r3, r2
 8003986:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003988:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_DMA_Init+0x168>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 031c 	and.w	r3, r3, #28
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	491d      	ldr	r1, [pc, #116]	; (8003a14 <HAL_DMA_Init+0x168>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	e019      	b.n	80039d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_DMA_Init+0x16c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f003 031c 	and.w	r3, r3, #28
 80039b0:	210f      	movs	r1, #15
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	4917      	ldr	r1, [pc, #92]	; (8003a18 <HAL_DMA_Init+0x16c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_DMA_Init+0x16c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f003 031c 	and.w	r3, r3, #28
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	4911      	ldr	r1, [pc, #68]	; (8003a18 <HAL_DMA_Init+0x16c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40020407 	.word	0x40020407
 8003a00:	bffdfff8 	.word	0xbffdfff8
 8003a04:	cccccccd 	.word	0xcccccccd
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	bffdfbf8 	.word	0xbffdfbf8
 8003a10:	40020400 	.word	0x40020400
 8003a14:	400200a8 	.word	0x400200a8
 8003a18:	400204a8 	.word	0x400204a8

08003a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Start_IT+0x20>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e04b      	b.n	8003ad4 <HAL_DMA_Start_IT+0xb8>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d13a      	bne.n	8003ac6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f95f 	bl	8003d38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 020e 	orr.w	r2, r2, #14
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e00f      	b.n	8003ab4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 020a 	orr.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e005      	b.n	8003ad2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2204      	movs	r2, #4
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e022      	b.n	8003b4c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 020e 	bic.w	r2, r2, #14
 8003b14:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 021c 	and.w	r2, r3, #28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d005      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e029      	b.n	8003bd0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020e 	bic.w	r2, r2, #14
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f003 021c 	and.w	r2, r3, #28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
    }
  }
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f003 031c 	and.w	r3, r3, #28
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d026      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x7a>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d021      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0204 	bic.w	r2, r2, #4
 8003c2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f003 021c 	and.w	r2, r3, #28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2104      	movs	r1, #4
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d071      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c52:	e06c      	b.n	8003d2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02e      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xec>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d029      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 020a 	bic.w	r2, r2, #10
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f003 021c 	and.w	r2, r3, #28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8003caa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d038      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cc4:	e033      	b.n	8003d2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f003 031c 	and.w	r3, r3, #28
 8003cce:	2208      	movs	r2, #8
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02a      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x156>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d025      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 020e 	bic.w	r2, r2, #14
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f003 021c 	and.w	r2, r3, #28
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f202 	lsl.w	r2, r1, r2
 8003d06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
}
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 021c 	and.w	r2, r3, #28
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d108      	bne.n	8003d7c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d7a:	e007      	b.n	8003d8c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003d9e:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4a67      	ldr	r2, [pc, #412]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003da4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003da8:	f023 0307 	bic.w	r3, r3, #7
 8003dac:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003dae:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003db8:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003dbc:	7a1b      	ldrb	r3, [r3, #8]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d105      	bne.n	8003dd0 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003dd0:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d045      	beq.n	8003e6e <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003de2:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	4a56      	ldr	r2, [pc, #344]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003dec:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_FLASH_IRQHandler+0x70>
 8003df8:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e02:	494f      	ldr	r1, [pc, #316]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	618b      	str	r3, [r1, #24]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_FLASH_IRQHandler+0x84>
 8003e12:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e1a:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003e1c:	f000 f8de 	bl	8003fdc <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003e20:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e22:	7a1b      	ldrb	r3, [r3, #8]
 8003e24:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f893 	bl	8003f5c <HAL_FLASH_OperationErrorCallback>
 8003e36:	e017      	b.n	8003e68 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d105      	bne.n	8003e4a <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f88a 	bl	8003f5c <HAL_FLASH_OperationErrorCallback>
 8003e48:	e00e      	b.n	8003e68 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8003e4a:	7afb      	ldrb	r3, [r7, #11]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d002      	beq.n	8003e56 <HAL_FLASH_IRQHandler+0xbe>
 8003e50:	7afb      	ldrb	r3, [r7, #11]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d105      	bne.n	8003e62 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003e56:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f87e 	bl	8003f5c <HAL_FLASH_OperationErrorCallback>
 8003e60:	e002      	b.n	8003e68 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 f87a 	bl	8003f5c <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003e6e:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04f      	beq.n	8003f1a <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003e80:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e82:	7a1b      	ldrb	r3, [r3, #8]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d12b      	bne.n	8003ee2 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e92:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003e9c:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f851 	bl	8003f48 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eae:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f857 	bl	8003f70 <FLASH_PageErase>
 8003ec2:	e02a      	b.n	8003f1a <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003ed2:	f000 f883 	bl	8003fdc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f834 	bl	8003f48 <HAL_FLASH_EndOfOperationCallback>
 8003ee0:	e01b      	b.n	8003f1a <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8003ee2:	f000 f87b 	bl	8003fdc <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ee8:	7a1b      	ldrb	r3, [r3, #8]
 8003eea:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d105      	bne.n	8003efe <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f826 	bl	8003f48 <HAL_FLASH_EndOfOperationCallback>
 8003efc:	e00a      	b.n	8003f14 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d002      	beq.n	8003f0a <HAL_FLASH_IRQHandler+0x172>
 8003f04:	7afb      	ldrb	r3, [r7, #11]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d104      	bne.n	8003f14 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f81a 	bl	8003f48 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f1c:	7a1b      	ldrb	r3, [r3, #8]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f2a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003f2e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
  }
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40022000 	.word	0x40022000
 8003f44:	20000024 	.word	0x20000024

08003f48 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8e:	6153      	str	r3, [r2, #20]
 8003f90:	e005      	b.n	8003f9e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f9c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <FLASH_PageErase+0x68>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fca:	6153      	str	r3, [r2, #20]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40022000 	.word	0x40022000

08003fdc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <FLASH_FlushCaches+0x8c>)
 8003fe4:	7f1b      	ldrb	r3, [r3, #28]
 8003fe6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d002      	beq.n	8003ff4 <FLASH_FlushCaches+0x18>
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d117      	bne.n	8004024 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <FLASH_FlushCaches+0x90>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <FLASH_FlushCaches+0x90>)
 8003ffa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ffe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <FLASH_FlushCaches+0x90>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <FLASH_FlushCaches+0x90>)
 8004006:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <FLASH_FlushCaches+0x90>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <FLASH_FlushCaches+0x90>)
 8004012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004016:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <FLASH_FlushCaches+0x90>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <FLASH_FlushCaches+0x90>)
 800401e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004022:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d002      	beq.n	8004030 <FLASH_FlushCaches+0x54>
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d111      	bne.n	8004054 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <FLASH_FlushCaches+0x90>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0d      	ldr	r2, [pc, #52]	; (800406c <FLASH_FlushCaches+0x90>)
 8004036:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <FLASH_FlushCaches+0x90>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <FLASH_FlushCaches+0x90>)
 8004042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004046:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <FLASH_FlushCaches+0x90>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <FLASH_FlushCaches+0x90>)
 800404e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004052:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <FLASH_FlushCaches+0x8c>)
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000024 	.word	0x20000024
 800406c:	40022000 	.word	0x40022000

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407e:	e17f      	b.n	8004380 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8171 	beq.w	800437a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d005      	beq.n	80040b0 <HAL_GPIO_Init+0x40>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d130      	bne.n	8004112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	2203      	movs	r2, #3
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e6:	2201      	movs	r2, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0201 	and.w	r2, r3, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b03      	cmp	r3, #3
 800411c:	d118      	bne.n	8004150 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004124:	2201      	movs	r2, #1
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f003 0201 	and.w	r2, r3, #1
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d017      	beq.n	800418c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d123      	bne.n	80041e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	08da      	lsrs	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80ac 	beq.w	800437a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_GPIO_Init+0x330>)
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	4a5e      	ldr	r2, [pc, #376]	; (80043a0 <HAL_GPIO_Init+0x330>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6613      	str	r3, [r2, #96]	; 0x60
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_GPIO_Init+0x330>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800423a:	4a5a      	ldr	r2, [pc, #360]	; (80043a4 <HAL_GPIO_Init+0x334>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004264:	d025      	beq.n	80042b2 <HAL_GPIO_Init+0x242>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <HAL_GPIO_Init+0x338>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01f      	beq.n	80042ae <HAL_GPIO_Init+0x23e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4e      	ldr	r2, [pc, #312]	; (80043ac <HAL_GPIO_Init+0x33c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d019      	beq.n	80042aa <HAL_GPIO_Init+0x23a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4d      	ldr	r2, [pc, #308]	; (80043b0 <HAL_GPIO_Init+0x340>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_GPIO_Init+0x236>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4c      	ldr	r2, [pc, #304]	; (80043b4 <HAL_GPIO_Init+0x344>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00d      	beq.n	80042a2 <HAL_GPIO_Init+0x232>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <HAL_GPIO_Init+0x348>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <HAL_GPIO_Init+0x22e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <HAL_GPIO_Init+0x34c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_GPIO_Init+0x22a>
 8004296:	2306      	movs	r3, #6
 8004298:	e00c      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 800429a:	2307      	movs	r3, #7
 800429c:	e00a      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 800429e:	2305      	movs	r3, #5
 80042a0:	e008      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e004      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_GPIO_Init+0x244>
 80042b2:	2300      	movs	r3, #0
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	f002 0203 	and.w	r2, r2, #3
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	4093      	lsls	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042c4:	4937      	ldr	r1, [pc, #220]	; (80043a4 <HAL_GPIO_Init+0x334>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d2:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <HAL_GPIO_Init+0x350>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	43db      	mvns	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042f6:	4a32      	ldr	r2, [pc, #200]	; (80043c0 <HAL_GPIO_Init+0x350>)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <HAL_GPIO_Init+0x350>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <HAL_GPIO_Init+0x350>)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_GPIO_Init+0x350>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	43db      	mvns	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_GPIO_Init+0x350>)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_GPIO_Init+0x350>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004374:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <HAL_GPIO_Init+0x350>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3301      	adds	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	f47f ae78 	bne.w	8004080 <HAL_GPIO_Init+0x10>
  }
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40010000 	.word	0x40010000
 80043a8:	48000400 	.word	0x48000400
 80043ac:	48000800 	.word	0x48000800
 80043b0:	48000c00 	.word	0x48000c00
 80043b4:	48001000 	.word	0x48001000
 80043b8:	48001400 	.word	0x48001400
 80043bc:	48001800 	.word	0x48001800
 80043c0:	40010400 	.word	0x40010400

080043c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
 80043d0:	4613      	mov	r3, r2
 80043d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <HAL_PWREx_GetVoltageRange+0x18>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40007000 	.word	0x40007000

08004410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d130      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004420:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d038      	beq.n	80044a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2232      	movs	r2, #50	; 0x32
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0c9b      	lsrs	r3, r3, #18
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004454:	e002      	b.n	800445c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3b01      	subs	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d102      	bne.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x60>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f2      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d110      	bne.n	80044a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00f      	b.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d007      	beq.n	80044a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004498:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800449e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40007000 	.word	0x40007000
 80044b4:	20000014 	.word	0x20000014
 80044b8:	431bde83 	.word	0x431bde83

080044bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e3ca      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ce:	4b97      	ldr	r3, [pc, #604]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d8:	4b94      	ldr	r3, [pc, #592]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80e4 	beq.w	80046b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_RCC_OscConfig+0x4a>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	f040 808b 	bne.w	8004614 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b01      	cmp	r3, #1
 8004502:	f040 8087 	bne.w	8004614 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004506:	4b89      	ldr	r3, [pc, #548]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e3a2      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	4b82      	ldr	r3, [pc, #520]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <HAL_RCC_OscConfig+0x7c>
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004536:	e005      	b.n	8004544 <HAL_RCC_OscConfig+0x88>
 8004538:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800453a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	4293      	cmp	r3, r2
 8004546:	d223      	bcs.n	8004590 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fd55 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e383      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800455c:	4b73      	ldr	r3, [pc, #460]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a72      	ldr	r2, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004562:	f043 0308 	orr.w	r3, r3, #8
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b70      	ldr	r3, [pc, #448]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	496d      	ldr	r1, [pc, #436]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	4968      	ldr	r1, [pc, #416]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
 800458e:	e025      	b.n	80045dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a65      	ldr	r2, [pc, #404]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004596:	f043 0308 	orr.w	r3, r3, #8
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4960      	ldr	r1, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	495b      	ldr	r1, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fd15 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e343      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045dc:	f000 fc4a 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b52      	ldr	r3, [pc, #328]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	4950      	ldr	r1, [pc, #320]	; (8004730 <HAL_RCC_OscConfig+0x274>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	4a4e      	ldr	r2, [pc, #312]	; (8004734 <HAL_RCC_OscConfig+0x278>)
 80045fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045fc:	4b4e      	ldr	r3, [pc, #312]	; (8004738 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd feb1 	bl	8002368 <HAL_InitTick>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d052      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	e327      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d032      	beq.n	8004682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a42      	ldr	r2, [pc, #264]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004628:	f7fd feee 	bl	8002408 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004630:	f7fd feea 	bl	8002408 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e310      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004642:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a36      	ldr	r2, [pc, #216]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4931      	ldr	r1, [pc, #196]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466c:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	492c      	ldr	r1, [pc, #176]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
 8004680:	e01a      	b.n	80046b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004682:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a29      	ldr	r2, [pc, #164]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800468e:	f7fd febb 	bl	8002408 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004696:	f7fd feb7 	bl	8002408 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e2dd      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x1da>
 80046b4:	e000      	b.n	80046b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d074      	beq.n	80047ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x21a>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	d10e      	bne.n	80046ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d10b      	bne.n	80046ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d064      	beq.n	80047ac <HAL_RCC_OscConfig+0x2f0>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d160      	bne.n	80047ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e2ba      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x24a>
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0b      	ldr	r2, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e026      	b.n	8004754 <HAL_RCC_OscConfig+0x298>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470e:	d115      	bne.n	800473c <HAL_RCC_OscConfig+0x280>
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a05      	ldr	r2, [pc, #20]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a02      	ldr	r2, [pc, #8]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e014      	b.n	8004754 <HAL_RCC_OscConfig+0x298>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	08009980 	.word	0x08009980
 8004734:	20000014 	.word	0x20000014
 8004738:	2000001c 	.word	0x2000001c
 800473c:	4ba0      	ldr	r3, [pc, #640]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a9f      	ldr	r2, [pc, #636]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b9d      	ldr	r3, [pc, #628]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a9c      	ldr	r2, [pc, #624]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd fe54 	bl	8002408 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fd fe50 	bl	8002408 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e276      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004776:	4b92      	ldr	r3, [pc, #584]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x2a8>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fe40 	bl	8002408 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd fe3c 	bl	8002408 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e262      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x2d0>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d060      	beq.n	800487c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d005      	beq.n	80047cc <HAL_RCC_OscConfig+0x310>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d119      	bne.n	80047fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d116      	bne.n	80047fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047cc:	4b7c      	ldr	r3, [pc, #496]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_OscConfig+0x328>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e23f      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	4973      	ldr	r1, [pc, #460]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f8:	e040      	b.n	800487c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004802:	4b6f      	ldr	r3, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6e      	ldr	r2, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd fdfb 	bl	8002408 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004816:	f7fd fdf7 	bl	8002408 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e21d      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004828:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	495f      	ldr	r1, [pc, #380]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
 8004848:	e018      	b.n	800487c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484a:	4b5d      	ldr	r3, [pc, #372]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5c      	ldr	r2, [pc, #368]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fd fdd7 	bl	8002408 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485e:	f7fd fdd3 	bl	8002408 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1f9      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004870:	4b53      	ldr	r3, [pc, #332]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03c      	beq.n	8004902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01c      	beq.n	80048ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004896:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd fdb2 	bl	8002408 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a8:	f7fd fdae 	bl	8002408 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1d4      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80048bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ef      	beq.n	80048a8 <HAL_RCC_OscConfig+0x3ec>
 80048c8:	e01b      	b.n	8004902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ca:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d0:	4a3b      	ldr	r2, [pc, #236]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd fd95 	bl	8002408 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fd fd91 	bl	8002408 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1b7      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ef      	bne.n	80048e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80a6 	beq.w	8004a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004914:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492a:	6593      	str	r3, [r2, #88]	; 0x58
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_RCC_OscConfig+0x508>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d118      	bne.n	800497a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004948:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_RCC_OscConfig+0x508>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_RCC_OscConfig+0x508>)
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004954:	f7fd fd58 	bl	8002408 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495c:	f7fd fd54 	bl	8002408 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e17a      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_RCC_OscConfig+0x508>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x4d8>
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004992:	e029      	b.n	80049e8 <HAL_RCC_OscConfig+0x52c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b05      	cmp	r3, #5
 800499a:	d115      	bne.n	80049c8 <HAL_RCC_OscConfig+0x50c>
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a03      	ldr	r2, [pc, #12]	; (80049c0 <HAL_RCC_OscConfig+0x504>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049bc:	e014      	b.n	80049e8 <HAL_RCC_OscConfig+0x52c>
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40007000 	.word	0x40007000
 80049c8:	4b9c      	ldr	r3, [pc, #624]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a9b      	ldr	r2, [pc, #620]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d8:	4b98      	ldr	r3, [pc, #608]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a97      	ldr	r2, [pc, #604]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fd0a 	bl	8002408 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fd fd06 	bl	8002408 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e12a      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCC_OscConfig+0x53c>
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fcf3 	bl	8002408 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd fcef 	bl	8002408 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e113      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ed      	bne.n	8004a26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a50:	4b7a      	ldr	r3, [pc, #488]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	4a79      	ldr	r2, [pc, #484]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80fe 	beq.w	8004c62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	f040 80d0 	bne.w	8004c10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a70:	4b72      	ldr	r3, [pc, #456]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0203 	and.w	r2, r3, #3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d130      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d127      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d11f      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab0:	2a07      	cmp	r2, #7
 8004ab2:	bf14      	ite	ne
 8004ab4:	2201      	movne	r2, #1
 8004ab6:	2200      	moveq	r2, #0
 8004ab8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d113      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	3b01      	subs	r3, #1
 8004acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d06e      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d069      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0ad      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b08:	4b4c      	ldr	r3, [pc, #304]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a4b      	ldr	r2, [pc, #300]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b14:	f7fd fc78 	bl	8002408 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fc74 	bl	8002408 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e09a      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <HAL_RCC_OscConfig+0x784>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b54:	0212      	lsls	r2, r2, #8
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b5c:	0852      	lsrs	r2, r2, #1
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	0552      	lsls	r2, r2, #21
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b68:	0852      	lsrs	r2, r2, #1
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	0652      	lsls	r2, r2, #25
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b74:	0912      	lsrs	r2, r2, #4
 8004b76:	0452      	lsls	r2, r2, #17
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4930      	ldr	r1, [pc, #192]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b80:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8c:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b98:	f7fd fc36 	bl	8002408 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fc32 	bl	8002408 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e058      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bbe:	e050      	b.n	8004c62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e04f      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d148      	bne.n	8004c62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004be8:	f7fd fc0e 	bl	8002408 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fc0a 	bl	8002408 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e030      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x734>
 8004c0e:	e028      	b.n	8004c62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d023      	beq.n	8004c5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_RCC_OscConfig+0x780>)
 8004c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fd fbf1 	bl	8002408 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c28:	e00c      	b.n	8004c44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd fbed 	bl	8002408 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d905      	bls.n	8004c44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e013      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_OscConfig+0x7b0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ec      	bne.n	8004c2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_OscConfig+0x7b0>)
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	4905      	ldr	r1, [pc, #20]	; (8004c6c <HAL_RCC_OscConfig+0x7b0>)
 8004c56:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_RCC_OscConfig+0x7b4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
 8004c5c:	e001      	b.n	8004c62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	feeefffc 	.word	0xfeeefffc

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0e7      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	4970      	ldr	r1, [pc, #448]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0cf      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d908      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b63      	ldr	r3, [pc, #396]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4960      	ldr	r1, [pc, #384]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04c      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d121      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0a6      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d12:	4b54      	ldr	r3, [pc, #336]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d115      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09a      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d2a:	4b4e      	ldr	r3, [pc, #312]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e08e      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e086      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4943      	ldr	r1, [pc, #268]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5c:	f7fd fb54 	bl	8002408 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fd fb50 	bl	8002408 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06e      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d208      	bcs.n	8004dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	492b      	ldr	r1, [pc, #172]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d210      	bcs.n	8004dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	4923      	ldr	r1, [pc, #140]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e036      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df6:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4918      	ldr	r1, [pc, #96]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4910      	ldr	r1, [pc, #64]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e28:	f000 f824 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	490b      	ldr	r1, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x1f4>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1f8>)
 8004e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_ClockConfig+0x1fc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fa8b 	bl	8002368 <HAL_InitTick>
 8004e52:	4603      	mov	r3, r0
 8004e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40022000 	.word	0x40022000
 8004e64:	40021000 	.word	0x40021000
 8004e68:	08009980 	.word	0x08009980
 8004e6c:	20000014 	.word	0x20000014
 8004e70:	2000001c 	.word	0x2000001c

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d121      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d11e      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eb4:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e004      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d134      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d003      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d003      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0xac>
 8004f18:	e005      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f1a:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f1c:	617b      	str	r3, [r7, #20]
      break;
 8004f1e:	e005      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f22:	617b      	str	r3, [r7, #20]
      break;
 8004f24:	e002      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	617b      	str	r3, [r7, #20]
      break;
 8004f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f2c:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	3301      	adds	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	fb03 f202 	mul.w	r2, r3, r2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0e5b      	lsrs	r3, r3, #25
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08009998 	.word	0x08009998
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000014 	.word	0x20000014

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa8:	f7ff fff0 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	08009990 	.word	0x08009990

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd4:	f7ff ffda 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0adb      	lsrs	r3, r3, #11
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08009990 	.word	0x08009990

08004ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005014:	f7ff f9ee 	bl	80043f4 <HAL_PWREx_GetVoltageRange>
 8005018:	6178      	str	r0, [r7, #20]
 800501a:	e014      	b.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800501c:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005026:	6593      	str	r3, [r2, #88]	; 0x58
 8005028:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005034:	f7ff f9de 	bl	80043f4 <HAL_PWREx_GetVoltageRange>
 8005038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d10b      	bne.n	8005066 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d919      	bls.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2ba0      	cmp	r3, #160	; 0xa0
 8005058:	d902      	bls.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800505a:	2302      	movs	r3, #2
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	e013      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005060:	2301      	movs	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e010      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d902      	bls.n	8005072 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800506c:	2303      	movs	r3, #3
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e00a      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d102      	bne.n	800507e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005078:	2302      	movs	r3, #2
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e004      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d101      	bne.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005084:	2301      	movs	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 0207 	bic.w	r2, r3, #7
 8005090:	4909      	ldr	r1, [pc, #36]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40022000 	.word	0x40022000

080050bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c8:	2300      	movs	r3, #0
 80050ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d041      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e0:	d02a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e6:	d824      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ec:	d008      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f2:	d81e      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fc:	d010      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050fe:	e018      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005100:	4b86      	ldr	r3, [pc, #536]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a85      	ldr	r2, [pc, #532]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800510c:	e015      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fabb 	bl	8005690 <RCCEx_PLLSAI1_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800511e:	e00c      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3320      	adds	r3, #32
 8005124:	2100      	movs	r1, #0
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fba6 	bl	8005878 <RCCEx_PLLSAI2_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005130:	e003      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	74fb      	strb	r3, [r7, #19]
      break;
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513a:	7cfb      	ldrb	r3, [r7, #19]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005140:	4b76      	ldr	r3, [pc, #472]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514e:	4973      	ldr	r1, [pc, #460]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d041      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800516c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005170:	d02a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005176:	d824      	bhi.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517c:	d008      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800517e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005182:	d81e      	bhi.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800518c:	d010      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800518e:	e018      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005190:	4b62      	ldr	r3, [pc, #392]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a61      	ldr	r2, [pc, #388]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800519c:	e015      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fa73 	bl	8005690 <RCCEx_PLLSAI1_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ae:	e00c      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3320      	adds	r3, #32
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb5e 	bl	8005878 <RCCEx_PLLSAI2_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	74fb      	strb	r3, [r7, #19]
      break;
 80051c6:	e000      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051d0:	4b52      	ldr	r3, [pc, #328]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051de:	494f      	ldr	r1, [pc, #316]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051e6:	e001      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80a0 	beq.w	800533a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051fe:	4b47      	ldr	r3, [pc, #284]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005214:	4b41      	ldr	r3, [pc, #260]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	4a40      	ldr	r2, [pc, #256]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521e:	6593      	str	r3, [r2, #88]	; 0x58
 8005220:	4b3e      	ldr	r3, [pc, #248]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522c:	2301      	movs	r3, #1
 800522e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005230:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a3a      	ldr	r2, [pc, #232]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800523c:	f7fd f8e4 	bl	8002408 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005242:	e009      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fd f8e0 	bl	8002408 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	74fb      	strb	r3, [r7, #19]
        break;
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ef      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d15c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800526a:	4b2c      	ldr	r3, [pc, #176]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01f      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	429a      	cmp	r2, r3
 8005286:	d019      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005294:	4b21      	ldr	r3, [pc, #132]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a20      	ldr	r2, [pc, #128]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	4a1c      	ldr	r2, [pc, #112]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fd f89f 	bl	8002408 <HAL_GetTick>
 80052ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052cc:	e00b      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fd f89b 	bl	8002408 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d902      	bls.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	74fb      	strb	r3, [r7, #19]
            break;
 80052e4:	e006      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0ec      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530a:	4904      	ldr	r1, [pc, #16]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005312:	e009      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	74bb      	strb	r3, [r7, #18]
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000
 8005320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005328:	7c7b      	ldrb	r3, [r7, #17]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b9e      	ldr	r3, [pc, #632]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	4a9d      	ldr	r2, [pc, #628]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005346:	4b98      	ldr	r3, [pc, #608]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f023 0203 	bic.w	r2, r3, #3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	4994      	ldr	r1, [pc, #592]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005368:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f023 020c 	bic.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	498c      	ldr	r1, [pc, #560]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800538a:	4b87      	ldr	r3, [pc, #540]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	4983      	ldr	r1, [pc, #524]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053ac:	4b7e      	ldr	r3, [pc, #504]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	497b      	ldr	r1, [pc, #492]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	4972      	ldr	r1, [pc, #456]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f0:	4b6d      	ldr	r3, [pc, #436]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	496a      	ldr	r1, [pc, #424]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005412:	4b65      	ldr	r3, [pc, #404]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005420:	4961      	ldr	r1, [pc, #388]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005434:	4b5c      	ldr	r3, [pc, #368]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005442:	4959      	ldr	r1, [pc, #356]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005456:	4b54      	ldr	r3, [pc, #336]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	4950      	ldr	r1, [pc, #320]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005478:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	4948      	ldr	r1, [pc, #288]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800549a:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	493f      	ldr	r1, [pc, #252]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d028      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054bc:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ca:	4937      	ldr	r1, [pc, #220]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a31      	ldr	r2, [pc, #196]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e011      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2101      	movs	r1, #1
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f8c8 	bl	8005690 <RCCEx_PLLSAI1_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d028      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800551a:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	491f      	ldr	r1, [pc, #124]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005544:	60d3      	str	r3, [r2, #12]
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f899 	bl	8005690 <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02b      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005596:	d109      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a02      	ldr	r2, [pc, #8]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a2:	60d3      	str	r3, [r2, #12]
 80055a4:	e014      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f867 	bl	8005690 <RCCEx_PLLSAI1_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02f      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055dc:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	4928      	ldr	r1, [pc, #160]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fa:	d10d      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	2102      	movs	r1, #2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f844 	bl	8005690 <RCCEx_PLLSAI1_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	74bb      	strb	r3, [r7, #18]
 8005616:	e011      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3320      	adds	r3, #32
 8005626:	2102      	movs	r1, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f925 	bl	8005878 <RCCEx_PLLSAI2_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	490d      	ldr	r1, [pc, #52]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567a:	4904      	ldr	r1, [pc, #16]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005682:	7cbb      	ldrb	r3, [r7, #18]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000

08005690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800569e:	4b75      	ldr	r3, [pc, #468]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056aa:	4b72      	ldr	r3, [pc, #456]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0203 	and.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10d      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
       ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056c2:	4b6c      	ldr	r3, [pc, #432]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
       ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d047      	beq.n	8005766 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	e044      	b.n	8005766 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d018      	beq.n	8005716 <RCCEx_PLLSAI1_Config+0x86>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d825      	bhi.n	8005734 <RCCEx_PLLSAI1_Config+0xa4>
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d002      	beq.n	80056f2 <RCCEx_PLLSAI1_Config+0x62>
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d009      	beq.n	8005704 <RCCEx_PLLSAI1_Config+0x74>
 80056f0:	e020      	b.n	8005734 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f2:	4b60      	ldr	r3, [pc, #384]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11d      	bne.n	800573a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005702:	e01a      	b.n	800573a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005704:	4b5b      	ldr	r3, [pc, #364]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005714:	e013      	b.n	800573e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005716:	4b57      	ldr	r3, [pc, #348]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005722:	4b54      	ldr	r3, [pc, #336]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005732:	e006      	b.n	8005742 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e004      	b.n	8005744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800573a:	bf00      	nop
 800573c:	e002      	b.n	8005744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005742:	bf00      	nop
    }

    if(status == HAL_OK)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10d      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800574a:	4b4a      	ldr	r3, [pc, #296]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	430b      	orrs	r3, r1
 8005760:	4944      	ldr	r1, [pc, #272]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d17d      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800576c:	4b41      	ldr	r3, [pc, #260]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a40      	ldr	r2, [pc, #256]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005778:	f7fc fe46 	bl	8002408 <HAL_GetTick>
 800577c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800577e:	e009      	b.n	8005794 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005780:	f7fc fe42 	bl	8002408 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d902      	bls.n	8005794 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	73fb      	strb	r3, [r7, #15]
        break;
 8005792:	e005      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005794:	4b37      	ldr	r3, [pc, #220]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ef      	bne.n	8005780 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d160      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d111      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ac:	4b31      	ldr	r3, [pc, #196]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6892      	ldr	r2, [r2, #8]
 80057bc:	0211      	lsls	r1, r2, #8
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68d2      	ldr	r2, [r2, #12]
 80057c2:	0912      	lsrs	r2, r2, #4
 80057c4:	0452      	lsls	r2, r2, #17
 80057c6:	430a      	orrs	r2, r1
 80057c8:	492a      	ldr	r1, [pc, #168]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
 80057ce:	e027      	b.n	8005820 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d112      	bne.n	80057fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6892      	ldr	r2, [r2, #8]
 80057e6:	0211      	lsls	r1, r2, #8
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6912      	ldr	r2, [r2, #16]
 80057ec:	0852      	lsrs	r2, r2, #1
 80057ee:	3a01      	subs	r2, #1
 80057f0:	0552      	lsls	r2, r2, #21
 80057f2:	430a      	orrs	r2, r1
 80057f4:	491f      	ldr	r1, [pc, #124]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	610b      	str	r3, [r1, #16]
 80057fa:	e011      	b.n	8005820 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	0211      	lsls	r1, r2, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6952      	ldr	r2, [r2, #20]
 8005812:	0852      	lsrs	r2, r2, #1
 8005814:	3a01      	subs	r2, #1
 8005816:	0652      	lsls	r2, r2, #25
 8005818:	430a      	orrs	r2, r1
 800581a:	4916      	ldr	r1, [pc, #88]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005820:	4b14      	ldr	r3, [pc, #80]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a13      	ldr	r2, [pc, #76]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fc fdec 	bl	8002408 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005832:	e009      	b.n	8005848 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005834:	f7fc fde8 	bl	8002408 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
          break;
 8005846:	e005      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ef      	beq.n	8005834 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	4904      	ldr	r1, [pc, #16]	; (8005874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000

08005878 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005886:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d018      	beq.n	80058c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005892:	4b67      	ldr	r3, [pc, #412]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0203 	and.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d10d      	bne.n	80058be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
       ||
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058aa:	4b61      	ldr	r3, [pc, #388]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
       ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d047      	beq.n	800594e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	e044      	b.n	800594e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d018      	beq.n	80058fe <RCCEx_PLLSAI2_Config+0x86>
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d825      	bhi.n	800591c <RCCEx_PLLSAI2_Config+0xa4>
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d002      	beq.n	80058da <RCCEx_PLLSAI2_Config+0x62>
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d009      	beq.n	80058ec <RCCEx_PLLSAI2_Config+0x74>
 80058d8:	e020      	b.n	800591c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11d      	bne.n	8005922 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ea:	e01a      	b.n	8005922 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058ec:	4b50      	ldr	r3, [pc, #320]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d116      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fc:	e013      	b.n	8005926 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058fe:	4b4c      	ldr	r3, [pc, #304]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800590a:	4b49      	ldr	r3, [pc, #292]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800591a:	e006      	b.n	800592a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e004      	b.n	800592c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800592a:	bf00      	nop
    }

    if(status == HAL_OK)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10d      	bne.n	800594e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005932:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	3b01      	subs	r3, #1
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	430b      	orrs	r3, r1
 8005948:	4939      	ldr	r1, [pc, #228]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594a:	4313      	orrs	r3, r2
 800594c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d167      	bne.n	8005a24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005954:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fc fd52 	bl	8002408 <HAL_GetTick>
 8005964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005966:	e009      	b.n	800597c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005968:	f7fc fd4e 	bl	8002408 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d902      	bls.n	800597c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	73fb      	strb	r3, [r7, #15]
        break;
 800597a:	e005      	b.n	8005988 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800597c:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ef      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d14a      	bne.n	8005a24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d111      	bne.n	80059b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800599c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6892      	ldr	r2, [r2, #8]
 80059a4:	0211      	lsls	r1, r2, #8
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	68d2      	ldr	r2, [r2, #12]
 80059aa:	0912      	lsrs	r2, r2, #4
 80059ac:	0452      	lsls	r2, r2, #17
 80059ae:	430a      	orrs	r2, r1
 80059b0:	491f      	ldr	r1, [pc, #124]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	614b      	str	r3, [r1, #20]
 80059b6:	e011      	b.n	80059dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6892      	ldr	r2, [r2, #8]
 80059c8:	0211      	lsls	r1, r2, #8
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6912      	ldr	r2, [r2, #16]
 80059ce:	0852      	lsrs	r2, r2, #1
 80059d0:	3a01      	subs	r2, #1
 80059d2:	0652      	lsls	r2, r2, #25
 80059d4:	430a      	orrs	r2, r1
 80059d6:	4916      	ldr	r1, [pc, #88]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059dc:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fc fd0e 	bl	8002408 <HAL_GetTick>
 80059ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ee:	e009      	b.n	8005a04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059f0:	f7fc fd0a 	bl	8002408 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d902      	bls.n	8005a04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	73fb      	strb	r3, [r7, #15]
          break;
 8005a02:	e005      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ef      	beq.n	80059f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4904      	ldr	r1, [pc, #16]	; (8005a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000

08005a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e049      	b.n	8005ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc f91e 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fccc 	bl	8006410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10f      	bne.n	8005b22 <HAL_TIM_Base_DeInit+0x40>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	f240 4344 	movw	r3, #1092	; 0x444
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <HAL_TIM_Base_DeInit+0x40>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fc f918 	bl	8001d58 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d001      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e04f      	b.n	8005c54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d018      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x76>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d115      	bne.n	8005c3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b06      	cmp	r3, #6
 8005c22:	d015      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0xb4>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d011      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3c:	e008      	b.n	8005c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e000      	b.n	8005c52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	f240 4344 	movw	r3, #1092	; 0x444
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e049      	b.n	8005d80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fb ff9d 	bl	8001c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f000 fb79 	bl	8006410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_TIM_PWM_Start+0x24>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e03c      	b.n	8005e26 <HAL_TIM_PWM_Start+0x9e>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d109      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0x3e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e02f      	b.n	8005e26 <HAL_TIM_PWM_Start+0x9e>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d109      	bne.n	8005de0 <HAL_TIM_PWM_Start+0x58>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e022      	b.n	8005e26 <HAL_TIM_PWM_Start+0x9e>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d109      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x72>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	bf14      	ite	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	2300      	moveq	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	e015      	b.n	8005e26 <HAL_TIM_PWM_Start+0x9e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d109      	bne.n	8005e14 <HAL_TIM_PWM_Start+0x8c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e008      	b.n	8005e26 <HAL_TIM_PWM_Start+0x9e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e09c      	b.n	8005f68 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0xb6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3c:	e023      	b.n	8005e86 <HAL_TIM_PWM_Start+0xfe>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xc6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e4c:	e01b      	b.n	8005e86 <HAL_TIM_PWM_Start+0xfe>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_PWM_Start+0xd6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5c:	e013      	b.n	8005e86 <HAL_TIM_PWM_Start+0xfe>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0xe6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_PWM_Start+0xfe>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Start+0xf6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e7c:	e003      	b.n	8005e86 <HAL_TIM_PWM_Start+0xfe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fe2e 	bl	8006af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a35      	ldr	r2, [pc, #212]	; (8005f70 <HAL_TIM_PWM_Start+0x1e8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x13e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <HAL_TIM_PWM_Start+0x1ec>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x13e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a32      	ldr	r2, [pc, #200]	; (8005f78 <HAL_TIM_PWM_Start+0x1f0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x13e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <HAL_TIM_PWM_Start+0x1f4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x13e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	; (8005f80 <HAL_TIM_PWM_Start+0x1f8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_PWM_Start+0x142>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <HAL_TIM_PWM_Start+0x144>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <HAL_TIM_PWM_Start+0x1e8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_TIM_PWM_Start+0x1fc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <HAL_TIM_PWM_Start+0x200>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_TIM_PWM_Start+0x204>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <HAL_TIM_PWM_Start+0x1ec>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x19e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <HAL_TIM_PWM_Start+0x1f0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d115      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <HAL_TIM_PWM_Start+0x208>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d015      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x1dc>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d011      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	e008      	b.n	8005f64 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e000      	b.n	8005f66 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	00010007 	.word	0x00010007

08005f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0202 	mvn.w	r2, #2
 8005fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9f8 	bl	80063d4 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9ea 	bl	80063c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9fb 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0204 	mvn.w	r2, #4
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9d2 	bl	80063d4 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9c4 	bl	80063c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9d5 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d020      	beq.n	8006090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01b      	beq.n	8006090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0208 	mvn.w	r2, #8
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2204      	movs	r2, #4
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9ac 	bl	80063d4 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f99e 	bl	80063c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9af 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	d020      	beq.n	80060dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01b      	beq.n	80060dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0210 	mvn.w	r2, #16
 80060ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2208      	movs	r2, #8
 80060b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f986 	bl	80063d4 <HAL_TIM_IC_CaptureCallback>
 80060c8:	e005      	b.n	80060d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f978 	bl	80063c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f989 	bl	80063e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00c      	beq.n	8006100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0201 	mvn.w	r2, #1
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa ffdc 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fe1c 	bl	8006d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fe14 	bl	8006d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f948 	bl	80063fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0220 	mvn.w	r2, #32
 8006188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fddc 	bl	8006d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0ff      	b.n	80063b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b14      	cmp	r3, #20
 80061c2:	f200 80f0 	bhi.w	80063a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	08006221 	.word	0x08006221
 80061d0:	080063a7 	.word	0x080063a7
 80061d4:	080063a7 	.word	0x080063a7
 80061d8:	080063a7 	.word	0x080063a7
 80061dc:	08006261 	.word	0x08006261
 80061e0:	080063a7 	.word	0x080063a7
 80061e4:	080063a7 	.word	0x080063a7
 80061e8:	080063a7 	.word	0x080063a7
 80061ec:	080062a3 	.word	0x080062a3
 80061f0:	080063a7 	.word	0x080063a7
 80061f4:	080063a7 	.word	0x080063a7
 80061f8:	080063a7 	.word	0x080063a7
 80061fc:	080062e3 	.word	0x080062e3
 8006200:	080063a7 	.word	0x080063a7
 8006204:	080063a7 	.word	0x080063a7
 8006208:	080063a7 	.word	0x080063a7
 800620c:	08006325 	.word	0x08006325
 8006210:	080063a7 	.word	0x080063a7
 8006214:	080063a7 	.word	0x080063a7
 8006218:	080063a7 	.word	0x080063a7
 800621c:	08006365 	.word	0x08006365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f98c 	bl	8006544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	619a      	str	r2, [r3, #24]
      break;
 800625e:	e0a5      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f9fc 	bl	8006664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	021a      	lsls	r2, r3, #8
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]
      break;
 80062a0:	e084      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fa65 	bl	8006778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0208 	orr.w	r2, r2, #8
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	61da      	str	r2, [r3, #28]
      break;
 80062e0:	e064      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 facd 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	021a      	lsls	r2, r3, #8
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
      break;
 8006322:	e043      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb16 	bl	800695c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0208 	orr.w	r2, r2, #8
 800633e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0204 	bic.w	r2, r2, #4
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006362:	e023      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fb5a 	bl	8006a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063a4:	e002      	b.n	80063ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]
      break;
 80063aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop

080063c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a40      	ldr	r2, [pc, #256]	; (8006524 <TIM_Base_SetConfig+0x114>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d00f      	beq.n	8006450 <TIM_Base_SetConfig+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a3d      	ldr	r2, [pc, #244]	; (8006528 <TIM_Base_SetConfig+0x118>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_Base_SetConfig+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a3c      	ldr	r2, [pc, #240]	; (800652c <TIM_Base_SetConfig+0x11c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a3b      	ldr	r2, [pc, #236]	; (8006530 <TIM_Base_SetConfig+0x120>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_Base_SetConfig+0x40>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a3a      	ldr	r2, [pc, #232]	; (8006534 <TIM_Base_SetConfig+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d108      	bne.n	8006462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2f      	ldr	r2, [pc, #188]	; (8006524 <TIM_Base_SetConfig+0x114>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01f      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006470:	d01b      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2c      	ldr	r2, [pc, #176]	; (8006528 <TIM_Base_SetConfig+0x118>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d017      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2b      	ldr	r2, [pc, #172]	; (800652c <TIM_Base_SetConfig+0x11c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <TIM_Base_SetConfig+0x120>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a29      	ldr	r2, [pc, #164]	; (8006534 <TIM_Base_SetConfig+0x124>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00b      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a28      	ldr	r2, [pc, #160]	; (8006538 <TIM_Base_SetConfig+0x128>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a27      	ldr	r2, [pc, #156]	; (800653c <TIM_Base_SetConfig+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_Base_SetConfig+0x9a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a26      	ldr	r2, [pc, #152]	; (8006540 <TIM_Base_SetConfig+0x130>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <TIM_Base_SetConfig+0x114>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00f      	beq.n	8006508 <TIM_Base_SetConfig+0xf8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <TIM_Base_SetConfig+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_Base_SetConfig+0xf8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a11      	ldr	r2, [pc, #68]	; (8006538 <TIM_Base_SetConfig+0x128>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_Base_SetConfig+0xf8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a10      	ldr	r2, [pc, #64]	; (800653c <TIM_Base_SetConfig+0x12c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_Base_SetConfig+0xf8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <TIM_Base_SetConfig+0x130>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d103      	bne.n	8006510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	615a      	str	r2, [r3, #20]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40013400 	.word	0x40013400
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800

08006544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f023 0201 	bic.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 0302 	bic.w	r3, r3, #2
 8006590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <TIM_OC1_SetConfig+0x10c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00f      	beq.n	80065c4 <TIM_OC1_SetConfig+0x80>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a2b      	ldr	r2, [pc, #172]	; (8006654 <TIM_OC1_SetConfig+0x110>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_OC1_SetConfig+0x80>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a2a      	ldr	r2, [pc, #168]	; (8006658 <TIM_OC1_SetConfig+0x114>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_OC1_SetConfig+0x80>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a29      	ldr	r2, [pc, #164]	; (800665c <TIM_OC1_SetConfig+0x118>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC1_SetConfig+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_OC1_SetConfig+0x11c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10c      	bne.n	80065de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0308 	bic.w	r3, r3, #8
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <TIM_OC1_SetConfig+0x10c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_OC1_SetConfig+0xc2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <TIM_OC1_SetConfig+0x110>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_OC1_SetConfig+0xc2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <TIM_OC1_SetConfig+0x114>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_OC1_SetConfig+0xc2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a18      	ldr	r2, [pc, #96]	; (800665c <TIM_OC1_SetConfig+0x118>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC1_SetConfig+0xc2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a17      	ldr	r2, [pc, #92]	; (8006660 <TIM_OC1_SetConfig+0x11c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d111      	bne.n	800662a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800660c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	621a      	str	r2, [r3, #32]
}
 8006644:	bf00      	nop
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800

08006664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f023 0210 	bic.w	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f023 0320 	bic.w	r3, r3, #32
 80066b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a28      	ldr	r2, [pc, #160]	; (8006764 <TIM_OC2_SetConfig+0x100>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC2_SetConfig+0x6c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a27      	ldr	r2, [pc, #156]	; (8006768 <TIM_OC2_SetConfig+0x104>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10d      	bne.n	80066ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <TIM_OC2_SetConfig+0x100>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00f      	beq.n	8006714 <TIM_OC2_SetConfig+0xb0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1c      	ldr	r2, [pc, #112]	; (8006768 <TIM_OC2_SetConfig+0x104>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00b      	beq.n	8006714 <TIM_OC2_SetConfig+0xb0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <TIM_OC2_SetConfig+0x108>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_OC2_SetConfig+0xb0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <TIM_OC2_SetConfig+0x10c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC2_SetConfig+0xb0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <TIM_OC2_SetConfig+0x110>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d113      	bne.n	800673c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800671a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40013400 	.word	0x40013400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800

08006778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a27      	ldr	r2, [pc, #156]	; (8006874 <TIM_OC3_SetConfig+0xfc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0x6a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <TIM_OC3_SetConfig+0x100>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <TIM_OC3_SetConfig+0xfc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00f      	beq.n	8006826 <TIM_OC3_SetConfig+0xae>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <TIM_OC3_SetConfig+0x100>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00b      	beq.n	8006826 <TIM_OC3_SetConfig+0xae>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1a      	ldr	r2, [pc, #104]	; (800687c <TIM_OC3_SetConfig+0x104>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d007      	beq.n	8006826 <TIM_OC3_SetConfig+0xae>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <TIM_OC3_SetConfig+0x108>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_OC3_SetConfig+0xae>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a18      	ldr	r2, [pc, #96]	; (8006884 <TIM_OC3_SetConfig+0x10c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d113      	bne.n	800684e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800682c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	621a      	str	r2, [r3, #32]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <TIM_OC4_SetConfig+0xc0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_OC4_SetConfig+0x84>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	; (800694c <TIM_OC4_SetConfig+0xc4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_OC4_SetConfig+0x84>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	; (8006950 <TIM_OC4_SetConfig+0xc8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_OC4_SetConfig+0x84>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <TIM_OC4_SetConfig+0xcc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_OC4_SetConfig+0x84>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a14      	ldr	r2, [pc, #80]	; (8006958 <TIM_OC4_SetConfig+0xd0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d109      	bne.n	8006920 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	019b      	lsls	r3, r3, #6
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40012c00 	.word	0x40012c00
 800694c:	40013400 	.word	0x40013400
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <TIM_OC5_SetConfig+0xb4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00f      	beq.n	80069d6 <TIM_OC5_SetConfig+0x7a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <TIM_OC5_SetConfig+0xb8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00b      	beq.n	80069d6 <TIM_OC5_SetConfig+0x7a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <TIM_OC5_SetConfig+0xbc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <TIM_OC5_SetConfig+0x7a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <TIM_OC5_SetConfig+0xc0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC5_SetConfig+0x7a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <TIM_OC5_SetConfig+0xc4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d109      	bne.n	80069ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	621a      	str	r2, [r3, #32]
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40013400 	.word	0x40013400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800

08006a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	051b      	lsls	r3, r3, #20
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	; (8006adc <TIM_OC6_SetConfig+0xb8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00f      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x7c>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a17      	ldr	r2, [pc, #92]	; (8006ae0 <TIM_OC6_SetConfig+0xbc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x7c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <TIM_OC6_SetConfig+0xc0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x7c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <TIM_OC6_SetConfig+0xc4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x7c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a14      	ldr	r2, [pc, #80]	; (8006aec <TIM_OC6_SetConfig+0xc8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d109      	bne.n	8006ab4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800

08006af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2201      	movs	r2, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	401a      	ands	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	fa01 f303 	lsl.w	r3, r1, r3
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e068      	b.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2e      	ldr	r2, [pc, #184]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d108      	bne.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d01d      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc6:	d018      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1a      	ldr	r2, [pc, #104]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d009      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10c      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	40014000 	.word	0x40014000

08006c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e065      	b.n	8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d115      	bne.n	8006d22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40013400 	.word	0x40013400

08006d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e040      	b.n	8006e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fb f80c 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2224      	movs	r2, #36	; 0x24
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fe8a 	bl	8007ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbcf 	bl	8007574 <UART_SetConfig>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e01b      	b.n	8006e18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 ff09 	bl	8007c28 <UART_CheckIdleState>
 8006e16:	4603      	mov	r3, r0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b08b      	sub	sp, #44	; 0x2c
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d147      	bne.n	8006ec6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_UART_Transmit_IT+0x22>
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e040      	b.n	8006ec8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e78:	d107      	bne.n	8006e8a <HAL_UART_Transmit_IT+0x6a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <HAL_UART_Transmit_IT+0xb4>)
 8006e86:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e88:	e002      	b.n	8006e90 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <HAL_UART_Transmit_IT+0xb8>)
 8006e8e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	69f9      	ldr	r1, [r7, #28]
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e6      	bne.n	8006e90 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006ec6:	2302      	movs	r3, #2
  }
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	372c      	adds	r7, #44	; 0x2c
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	08008181 	.word	0x08008181
 8006ed8:	080080c9 	.word	0x080080c9

08006edc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d137      	bne.n	8006f64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_UART_Receive_IT+0x24>
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e030      	b.n	8006f66 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a18      	ldr	r2, [pc, #96]	; (8006f70 <HAL_UART_Receive_IT+0x94>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d01f      	beq.n	8006f54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d018      	beq.n	8006f54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	69f9      	ldr	r1, [r7, #28]
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 ff74 	bl	8007e48 <UART_Start_Receive_IT>
 8006f60:	4603      	mov	r3, r0
 8006f62:	e000      	b.n	8006f66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3728      	adds	r7, #40	; 0x28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40008000 	.word	0x40008000

08006f74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b0ba      	sub	sp, #232	; 0xe8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d115      	bne.n	8006fdc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00f      	beq.n	8006fdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 82ae 	beq.w	800752e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
      }
      return;
 8006fda:	e2a8      	b.n	800752e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8117 	beq.w	8007214 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ff2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ff6:	4b85      	ldr	r3, [pc, #532]	; (800720c <HAL_UART_IRQHandler+0x298>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 810a 	beq.w	8007214 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d011      	beq.n	8007030 <HAL_UART_IRQHandler+0xbc>
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007026:	f043 0201 	orr.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <HAL_UART_IRQHandler+0xec>
 800703c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2202      	movs	r2, #2
 800704e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007056:	f043 0204 	orr.w	r2, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d011      	beq.n	8007090 <HAL_UART_IRQHandler+0x11c>
 800706c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2204      	movs	r2, #4
 800707e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2208      	movs	r2, #8
 80070ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c2:	f043 0208 	orr.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <HAL_UART_IRQHandler+0x18a>
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f4:	f043 0220 	orr.w	r2, r3, #32
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8214 	beq.w	8007532 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800714a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800714e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007152:	2b00      	cmp	r3, #0
 8007154:	d04f      	beq.n	80071f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 ff3c 	bl	8007fd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d141      	bne.n	80071ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800719a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1d9      	bne.n	800716a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d013      	beq.n	80071e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <HAL_UART_IRQHandler+0x29c>)
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fc fcc4 	bl	8003b58 <HAL_DMA_Abort_IT>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d017      	beq.n	8007206 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	e00f      	b.n	8007206 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9ae 	bl	8007548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	e00b      	b.n	8007206 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9aa 	bl	8007548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	e007      	b.n	8007206 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9a6 	bl	8007548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007204:	e195      	b.n	8007532 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007206:	bf00      	nop
    return;
 8007208:	e193      	b.n	8007532 <HAL_UART_IRQHandler+0x5be>
 800720a:	bf00      	nop
 800720c:	04000120 	.word	0x04000120
 8007210:	0800809d 	.word	0x0800809d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 814e 	bne.w	80074ba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800721e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8147 	beq.w	80074ba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8140 	beq.w	80074ba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b40      	cmp	r3, #64	; 0x40
 800724e:	f040 80b8 	bne.w	80073c2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800725e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8167 	beq.w	8007536 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800726e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007272:	429a      	cmp	r2, r3
 8007274:	f080 815f 	bcs.w	8007536 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800727e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 8086 	bne.w	80073a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1da      	bne.n	8007294 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800730a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e1      	bne.n	80072de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800732a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800732c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800733e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800734c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800736e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007370:	f023 0310 	bic.w	r3, r3, #16
 8007374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007382:	65bb      	str	r3, [r7, #88]	; 0x58
 8007384:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e4      	bne.n	8007360 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fb9e 	bl	8003adc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f8ce 	bl	800755c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073c0:	e0b9      	b.n	8007536 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80ab 	beq.w	800753a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80073e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80a6 	beq.w	800753a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007410:	647b      	str	r3, [r7, #68]	; 0x44
 8007412:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	623b      	str	r3, [r7, #32]
   return(result);
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007448:	633a      	str	r2, [r7, #48]	; 0x30
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800744e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e3      	bne.n	8007424 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	60fb      	str	r3, [r7, #12]
   return(result);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0310 	bic.w	r3, r3, #16
 8007484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	69b9      	ldr	r1, [r7, #24]
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	617b      	str	r3, [r7, #20]
   return(result);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e4      	bne.n	8007470 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f852 	bl	800755c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074b8:	e03f      	b.n	800753a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00e      	beq.n	80074e4 <HAL_UART_IRQHandler+0x570>
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 f895 	bl	800860c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074e2:	e02d      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01c      	beq.n	800753e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
    }
    return;
 800750c:	e017      	b.n	800753e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d012      	beq.n	8007540 <HAL_UART_IRQHandler+0x5cc>
 800751a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00c      	beq.n	8007540 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fe8a 	bl	8008240 <UART_EndTransmit_IT>
    return;
 800752c:	e008      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
      return;
 800752e:	bf00      	nop
 8007530:	e006      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007532:	bf00      	nop
 8007534:	e004      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
      return;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <HAL_UART_IRQHandler+0x5cc>
    return;
 800753e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007540:	37e8      	adds	r7, #232	; 0xe8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007578:	b08a      	sub	sp, #40	; 0x28
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	431a      	orrs	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	431a      	orrs	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	4313      	orrs	r3, r2
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4ba4      	ldr	r3, [pc, #656]	; (8007834 <UART_SetConfig+0x2c0>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a99      	ldr	r2, [pc, #612]	; (8007838 <UART_SetConfig+0x2c4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075dc:	4313      	orrs	r3, r2
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a90      	ldr	r2, [pc, #576]	; (800783c <UART_SetConfig+0x2c8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d126      	bne.n	800764c <UART_SetConfig+0xd8>
 80075fe:	4b90      	ldr	r3, [pc, #576]	; (8007840 <UART_SetConfig+0x2cc>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	2b03      	cmp	r3, #3
 800760a:	d81b      	bhi.n	8007644 <UART_SetConfig+0xd0>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <UART_SetConfig+0xa0>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007625 	.word	0x08007625
 8007618:	08007635 	.word	0x08007635
 800761c:	0800762d 	.word	0x0800762d
 8007620:	0800763d 	.word	0x0800763d
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762a:	e116      	b.n	800785a <UART_SetConfig+0x2e6>
 800762c:	2302      	movs	r3, #2
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007632:	e112      	b.n	800785a <UART_SetConfig+0x2e6>
 8007634:	2304      	movs	r3, #4
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763a:	e10e      	b.n	800785a <UART_SetConfig+0x2e6>
 800763c:	2308      	movs	r3, #8
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007642:	e10a      	b.n	800785a <UART_SetConfig+0x2e6>
 8007644:	2310      	movs	r3, #16
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764a:	e106      	b.n	800785a <UART_SetConfig+0x2e6>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a7c      	ldr	r2, [pc, #496]	; (8007844 <UART_SetConfig+0x2d0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d138      	bne.n	80076c8 <UART_SetConfig+0x154>
 8007656:	4b7a      	ldr	r3, [pc, #488]	; (8007840 <UART_SetConfig+0x2cc>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f003 030c 	and.w	r3, r3, #12
 8007660:	2b0c      	cmp	r3, #12
 8007662:	d82d      	bhi.n	80076c0 <UART_SetConfig+0x14c>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <UART_SetConfig+0xf8>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	080076a1 	.word	0x080076a1
 8007670:	080076c1 	.word	0x080076c1
 8007674:	080076c1 	.word	0x080076c1
 8007678:	080076c1 	.word	0x080076c1
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076c1 	.word	0x080076c1
 8007684:	080076c1 	.word	0x080076c1
 8007688:	080076c1 	.word	0x080076c1
 800768c:	080076a9 	.word	0x080076a9
 8007690:	080076c1 	.word	0x080076c1
 8007694:	080076c1 	.word	0x080076c1
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	2300      	movs	r3, #0
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e0d8      	b.n	800785a <UART_SetConfig+0x2e6>
 80076a8:	2302      	movs	r3, #2
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e0d4      	b.n	800785a <UART_SetConfig+0x2e6>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b6:	e0d0      	b.n	800785a <UART_SetConfig+0x2e6>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076be:	e0cc      	b.n	800785a <UART_SetConfig+0x2e6>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	e0c8      	b.n	800785a <UART_SetConfig+0x2e6>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a5e      	ldr	r2, [pc, #376]	; (8007848 <UART_SetConfig+0x2d4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d125      	bne.n	800771e <UART_SetConfig+0x1aa>
 80076d2:	4b5b      	ldr	r3, [pc, #364]	; (8007840 <UART_SetConfig+0x2cc>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d016      	beq.n	800770e <UART_SetConfig+0x19a>
 80076e0:	2b30      	cmp	r3, #48	; 0x30
 80076e2:	d818      	bhi.n	8007716 <UART_SetConfig+0x1a2>
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d00a      	beq.n	80076fe <UART_SetConfig+0x18a>
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d814      	bhi.n	8007716 <UART_SetConfig+0x1a2>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <UART_SetConfig+0x182>
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d008      	beq.n	8007706 <UART_SetConfig+0x192>
 80076f4:	e00f      	b.n	8007716 <UART_SetConfig+0x1a2>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fc:	e0ad      	b.n	800785a <UART_SetConfig+0x2e6>
 80076fe:	2302      	movs	r3, #2
 8007700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007704:	e0a9      	b.n	800785a <UART_SetConfig+0x2e6>
 8007706:	2304      	movs	r3, #4
 8007708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770c:	e0a5      	b.n	800785a <UART_SetConfig+0x2e6>
 800770e:	2308      	movs	r3, #8
 8007710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007714:	e0a1      	b.n	800785a <UART_SetConfig+0x2e6>
 8007716:	2310      	movs	r3, #16
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771c:	e09d      	b.n	800785a <UART_SetConfig+0x2e6>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4a      	ldr	r2, [pc, #296]	; (800784c <UART_SetConfig+0x2d8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d125      	bne.n	8007774 <UART_SetConfig+0x200>
 8007728:	4b45      	ldr	r3, [pc, #276]	; (8007840 <UART_SetConfig+0x2cc>)
 800772a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007732:	2bc0      	cmp	r3, #192	; 0xc0
 8007734:	d016      	beq.n	8007764 <UART_SetConfig+0x1f0>
 8007736:	2bc0      	cmp	r3, #192	; 0xc0
 8007738:	d818      	bhi.n	800776c <UART_SetConfig+0x1f8>
 800773a:	2b80      	cmp	r3, #128	; 0x80
 800773c:	d00a      	beq.n	8007754 <UART_SetConfig+0x1e0>
 800773e:	2b80      	cmp	r3, #128	; 0x80
 8007740:	d814      	bhi.n	800776c <UART_SetConfig+0x1f8>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <UART_SetConfig+0x1d8>
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d008      	beq.n	800775c <UART_SetConfig+0x1e8>
 800774a:	e00f      	b.n	800776c <UART_SetConfig+0x1f8>
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007752:	e082      	b.n	800785a <UART_SetConfig+0x2e6>
 8007754:	2302      	movs	r3, #2
 8007756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775a:	e07e      	b.n	800785a <UART_SetConfig+0x2e6>
 800775c:	2304      	movs	r3, #4
 800775e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007762:	e07a      	b.n	800785a <UART_SetConfig+0x2e6>
 8007764:	2308      	movs	r3, #8
 8007766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776a:	e076      	b.n	800785a <UART_SetConfig+0x2e6>
 800776c:	2310      	movs	r3, #16
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007772:	e072      	b.n	800785a <UART_SetConfig+0x2e6>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a35      	ldr	r2, [pc, #212]	; (8007850 <UART_SetConfig+0x2dc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d12a      	bne.n	80077d4 <UART_SetConfig+0x260>
 800777e:	4b30      	ldr	r3, [pc, #192]	; (8007840 <UART_SetConfig+0x2cc>)
 8007780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778c:	d01a      	beq.n	80077c4 <UART_SetConfig+0x250>
 800778e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007792:	d81b      	bhi.n	80077cc <UART_SetConfig+0x258>
 8007794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007798:	d00c      	beq.n	80077b4 <UART_SetConfig+0x240>
 800779a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779e:	d815      	bhi.n	80077cc <UART_SetConfig+0x258>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <UART_SetConfig+0x238>
 80077a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a8:	d008      	beq.n	80077bc <UART_SetConfig+0x248>
 80077aa:	e00f      	b.n	80077cc <UART_SetConfig+0x258>
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b2:	e052      	b.n	800785a <UART_SetConfig+0x2e6>
 80077b4:	2302      	movs	r3, #2
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ba:	e04e      	b.n	800785a <UART_SetConfig+0x2e6>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c2:	e04a      	b.n	800785a <UART_SetConfig+0x2e6>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ca:	e046      	b.n	800785a <UART_SetConfig+0x2e6>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d2:	e042      	b.n	800785a <UART_SetConfig+0x2e6>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a17      	ldr	r2, [pc, #92]	; (8007838 <UART_SetConfig+0x2c4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d13a      	bne.n	8007854 <UART_SetConfig+0x2e0>
 80077de:	4b18      	ldr	r3, [pc, #96]	; (8007840 <UART_SetConfig+0x2cc>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ec:	d01a      	beq.n	8007824 <UART_SetConfig+0x2b0>
 80077ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077f2:	d81b      	bhi.n	800782c <UART_SetConfig+0x2b8>
 80077f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f8:	d00c      	beq.n	8007814 <UART_SetConfig+0x2a0>
 80077fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fe:	d815      	bhi.n	800782c <UART_SetConfig+0x2b8>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <UART_SetConfig+0x298>
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007808:	d008      	beq.n	800781c <UART_SetConfig+0x2a8>
 800780a:	e00f      	b.n	800782c <UART_SetConfig+0x2b8>
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007812:	e022      	b.n	800785a <UART_SetConfig+0x2e6>
 8007814:	2302      	movs	r3, #2
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781a:	e01e      	b.n	800785a <UART_SetConfig+0x2e6>
 800781c:	2304      	movs	r3, #4
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007822:	e01a      	b.n	800785a <UART_SetConfig+0x2e6>
 8007824:	2308      	movs	r3, #8
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782a:	e016      	b.n	800785a <UART_SetConfig+0x2e6>
 800782c:	2310      	movs	r3, #16
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007832:	e012      	b.n	800785a <UART_SetConfig+0x2e6>
 8007834:	efff69f3 	.word	0xefff69f3
 8007838:	40008000 	.word	0x40008000
 800783c:	40013800 	.word	0x40013800
 8007840:	40021000 	.word	0x40021000
 8007844:	40004400 	.word	0x40004400
 8007848:	40004800 	.word	0x40004800
 800784c:	40004c00 	.word	0x40004c00
 8007850:	40005000 	.word	0x40005000
 8007854:	2310      	movs	r3, #16
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a9f      	ldr	r2, [pc, #636]	; (8007adc <UART_SetConfig+0x568>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d17a      	bne.n	800795a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007868:	2b08      	cmp	r3, #8
 800786a:	d824      	bhi.n	80078b6 <UART_SetConfig+0x342>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0x300>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	08007899 	.word	0x08007899
 8007878:	080078b7 	.word	0x080078b7
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078b7 	.word	0x080078b7
 8007884:	080078a7 	.word	0x080078a7
 8007888:	080078b7 	.word	0x080078b7
 800788c:	080078b7 	.word	0x080078b7
 8007890:	080078b7 	.word	0x080078b7
 8007894:	080078af 	.word	0x080078af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fd fb84 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 800789c:	61f8      	str	r0, [r7, #28]
        break;
 800789e:	e010      	b.n	80078c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a0:	4b8f      	ldr	r3, [pc, #572]	; (8007ae0 <UART_SetConfig+0x56c>)
 80078a2:	61fb      	str	r3, [r7, #28]
        break;
 80078a4:	e00d      	b.n	80078c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a6:	f7fd fae5 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80078aa:	61f8      	str	r0, [r7, #28]
        break;
 80078ac:	e009      	b.n	80078c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b2:	61fb      	str	r3, [r7, #28]
        break;
 80078b4:	e005      	b.n	80078c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80fb 	beq.w	8007ac0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d305      	bcc.n	80078e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d903      	bls.n	80078ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078ec:	e0e8      	b.n	8007ac0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	2200      	movs	r2, #0
 80078f2:	461c      	mov	r4, r3
 80078f4:	4615      	mov	r5, r2
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	022b      	lsls	r3, r5, #8
 8007900:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007904:	0222      	lsls	r2, r4, #8
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	6849      	ldr	r1, [r1, #4]
 800790a:	0849      	lsrs	r1, r1, #1
 800790c:	2000      	movs	r0, #0
 800790e:	4688      	mov	r8, r1
 8007910:	4681      	mov	r9, r0
 8007912:	eb12 0a08 	adds.w	sl, r2, r8
 8007916:	eb43 0b09 	adc.w	fp, r3, r9
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	f7f9 f908 	bl	8000b40 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793e:	d308      	bcc.n	8007952 <UART_SetConfig+0x3de>
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007946:	d204      	bcs.n	8007952 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	e0b6      	b.n	8007ac0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007958:	e0b2      	b.n	8007ac0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	d15e      	bne.n	8007a22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007968:	2b08      	cmp	r3, #8
 800796a:	d828      	bhi.n	80079be <UART_SetConfig+0x44a>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x400>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007999 	.word	0x08007999
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a9 	.word	0x080079a9
 8007980:	080079bf 	.word	0x080079bf
 8007984:	080079af 	.word	0x080079af
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079bf 	.word	0x080079bf
 8007990:	080079bf 	.word	0x080079bf
 8007994:	080079b7 	.word	0x080079b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fd fb04 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 800799c:	61f8      	str	r0, [r7, #28]
        break;
 800799e:	e014      	b.n	80079ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fd fb16 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80079a4:	61f8      	str	r0, [r7, #28]
        break;
 80079a6:	e010      	b.n	80079ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b4d      	ldr	r3, [pc, #308]	; (8007ae0 <UART_SetConfig+0x56c>)
 80079aa:	61fb      	str	r3, [r7, #28]
        break;
 80079ac:	e00d      	b.n	80079ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ae:	f7fd fa61 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80079b2:	61f8      	str	r0, [r7, #28]
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	61fb      	str	r3, [r7, #28]
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d077      	beq.n	8007ac0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	005a      	lsls	r2, r3, #1
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d916      	bls.n	8007a1a <UART_SetConfig+0x4a6>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f2:	d212      	bcs.n	8007a1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f023 030f 	bic.w	r3, r3, #15
 80079fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	8afb      	ldrh	r3, [r7, #22]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	8afa      	ldrh	r2, [r7, #22]
 8007a16:	60da      	str	r2, [r3, #12]
 8007a18:	e052      	b.n	8007ac0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a20:	e04e      	b.n	8007ac0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d827      	bhi.n	8007a7a <UART_SetConfig+0x506>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <UART_SetConfig+0x4bc>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	08007a7b 	.word	0x08007a7b
 8007a40:	08007a6b 	.word	0x08007a6b
 8007a44:	08007a7b 	.word	0x08007a7b
 8007a48:	08007a7b 	.word	0x08007a7b
 8007a4c:	08007a7b 	.word	0x08007a7b
 8007a50:	08007a73 	.word	0x08007a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a54:	f7fd faa6 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8007a58:	61f8      	str	r0, [r7, #28]
        break;
 8007a5a:	e014      	b.n	8007a86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a5c:	f7fd fab8 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007a60:	61f8      	str	r0, [r7, #28]
        break;
 8007a62:	e010      	b.n	8007a86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a64:	4b1e      	ldr	r3, [pc, #120]	; (8007ae0 <UART_SetConfig+0x56c>)
 8007a66:	61fb      	str	r3, [r7, #28]
        break;
 8007a68:	e00d      	b.n	8007a86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6a:	f7fd fa03 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8007a6e:	61f8      	str	r0, [r7, #28]
        break;
 8007a70:	e009      	b.n	8007a86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a76:	61fb      	str	r3, [r7, #28]
        break;
 8007a78:	e005      	b.n	8007a86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a84:	bf00      	nop
    }

    if (pclk != 0U)
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d019      	beq.n	8007ac0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	085a      	lsrs	r2, r3, #1
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d909      	bls.n	8007aba <UART_SetConfig+0x546>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aac:	d205      	bcs.n	8007aba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60da      	str	r2, [r3, #12]
 8007ab8:	e002      	b.n	8007ac0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007acc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3728      	adds	r7, #40	; 0x28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ada:	bf00      	nop
 8007adc:	40008000 	.word	0x40008000
 8007ae0:	00f42400 	.word	0x00f42400

08007ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01a      	beq.n	8007bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be2:	d10a      	bne.n	8007bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b098      	sub	sp, #96	; 0x60
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c38:	f7fa fbe6 	bl	8002408 <HAL_GetTick>
 8007c3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d12e      	bne.n	8007caa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c54:	2200      	movs	r2, #0
 8007c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f88c 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d021      	beq.n	8007caa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c84:	647b      	str	r3, [r7, #68]	; 0x44
 8007c86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e062      	b.n	8007d70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d149      	bne.n	8007d4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f856 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d03c      	beq.n	8007d4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	623b      	str	r3, [r7, #32]
   return(result);
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e6      	bne.n	8007cd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d24:	61fa      	str	r2, [r7, #28]
 8007d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	617b      	str	r3, [r7, #20]
   return(result);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e5      	bne.n	8007d04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e011      	b.n	8007d70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3758      	adds	r7, #88	; 0x58
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d88:	e049      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d045      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d92:	f7fa fb39 	bl	8002408 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d302      	bcc.n	8007da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e048      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d031      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d110      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f8ff 	bl	8007fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2208      	movs	r2, #8
 8007dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e029      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d111      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 f8e5 	bl	8007fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e00f      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	bf0c      	ite	eq
 8007e2e:	2301      	moveq	r3, #1
 8007e30:	2300      	movne	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d0a6      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b097      	sub	sp, #92	; 0x5c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	88fa      	ldrh	r2, [r7, #6]
 8007e60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	88fa      	ldrh	r2, [r7, #6]
 8007e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7a:	d10e      	bne.n	8007e9a <UART_Start_Receive_IT+0x52>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <UART_Start_Receive_IT+0x48>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e8e:	e02d      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	22ff      	movs	r2, #255	; 0xff
 8007e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e98:	e028      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10d      	bne.n	8007ebe <UART_Start_Receive_IT+0x76>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <UART_Start_Receive_IT+0x6c>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	22ff      	movs	r2, #255	; 0xff
 8007eae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eb2:	e01b      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	227f      	movs	r2, #127	; 0x7f
 8007eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ebc:	e016      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ec6:	d10d      	bne.n	8007ee4 <UART_Start_Receive_IT+0x9c>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <UART_Start_Receive_IT+0x92>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	227f      	movs	r2, #127	; 0x7f
 8007ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ed8:	e008      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	223f      	movs	r2, #63	; 0x3f
 8007ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ee2:	e003      	b.n	8007eec <UART_Start_Receive_IT+0xa4>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2222      	movs	r2, #34	; 0x22
 8007ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	657b      	str	r3, [r7, #84]	; 0x54
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e5      	bne.n	8007efc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d107      	bne.n	8007f4a <UART_Start_Receive_IT+0x102>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <UART_Start_Receive_IT+0x184>)
 8007f46:	669a      	str	r2, [r3, #104]	; 0x68
 8007f48:	e002      	b.n	8007f50 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <UART_Start_Receive_IT+0x188>)
 8007f4e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d019      	beq.n	8007f8c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
 8007f78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e6      	bne.n	8007f58 <UART_Start_Receive_IT+0x110>
 8007f8a:	e018      	b.n	8007fbe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f043 0320 	orr.w	r3, r3, #32
 8007fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007faa:	623b      	str	r3, [r7, #32]
 8007fac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	69f9      	ldr	r1, [r7, #28]
 8007fb0:	6a3a      	ldr	r2, [r7, #32]
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	375c      	adds	r7, #92	; 0x5c
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	08008451 	.word	0x08008451
 8007fd0:	08008295 	.word	0x08008295

08007fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b095      	sub	sp, #84	; 0x54
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8007ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e6      	bne.n	8007fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	61fb      	str	r3, [r7, #28]
   return(result);
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	64bb      	str	r3, [r7, #72]	; 0x48
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800802e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e5      	bne.n	800800e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008046:	2b01      	cmp	r3, #1
 8008048:	d118      	bne.n	800807c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	60bb      	str	r3, [r7, #8]
   return(result);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6979      	ldr	r1, [r7, #20]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	613b      	str	r3, [r7, #16]
   return(result);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008090:	bf00      	nop
 8008092:	3754      	adds	r7, #84	; 0x54
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fa44 	bl	8007548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b08f      	sub	sp, #60	; 0x3c
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080d4:	2b21      	cmp	r3, #33	; 0x21
 80080d6:	d14d      	bne.n	8008174 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d132      	bne.n	800814a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008104:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60bb      	str	r3, [r7, #8]
   return(result);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812a:	633b      	str	r3, [r7, #48]	; 0x30
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6979      	ldr	r1, [r7, #20]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	613b      	str	r3, [r7, #16]
   return(result);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008148:	e014      	b.n	8008174 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	b292      	uxth	r2, r2
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	b29a      	uxth	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008174:	bf00      	nop
 8008176:	373c      	adds	r7, #60	; 0x3c
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b091      	sub	sp, #68	; 0x44
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818c:	2b21      	cmp	r3, #33	; 0x21
 800818e:	d151      	bne.n	8008234 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d132      	bne.n	8008202 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	623b      	str	r3, [r7, #32]
   return(result);
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30
 80081bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	60fb      	str	r3, [r7, #12]
   return(result);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	617b      	str	r3, [r7, #20]
   return(result);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e6      	bne.n	80081ce <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008200:	e018      	b.n	8008234 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820a:	881a      	ldrh	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008214:	b292      	uxth	r2, r2
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821c:	1c9a      	adds	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008234:	bf00      	nop
 8008236:	3744      	adds	r7, #68	; 0x44
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60bb      	str	r3, [r7, #8]
   return(result);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	613b      	str	r3, [r7, #16]
   return(result);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f8 febc 	bl	8001004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800828c:	bf00      	nop
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b09c      	sub	sp, #112	; 0x70
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ac:	2b22      	cmp	r3, #34	; 0x22
 80082ae:	f040 80be 	bne.w	800842e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082c0:	b2d9      	uxtb	r1, r3
 80082c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082cc:	400a      	ands	r2, r1
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 80a3 	bne.w	8008442 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800830a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008310:	66bb      	str	r3, [r7, #104]	; 0x68
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800831a:	65bb      	str	r3, [r7, #88]	; 0x58
 800831c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e6      	bne.n	80082fc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3308      	adds	r3, #8
 8008334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	667b      	str	r3, [r7, #100]	; 0x64
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800834e:	647a      	str	r2, [r7, #68]	; 0x44
 8008350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e5      	bne.n	800832e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a34      	ldr	r2, [pc, #208]	; (800844c <UART_RxISR_8BIT+0x1b8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d01f      	beq.n	80083c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	623b      	str	r3, [r7, #32]
   return(result);
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083a2:	663b      	str	r3, [r7, #96]	; 0x60
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ac:	633b      	str	r3, [r7, #48]	; 0x30
 80083ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e6      	bne.n	800838e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d12e      	bne.n	8008426 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	60fb      	str	r3, [r7, #12]
   return(result);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0310 	bic.w	r3, r3, #16
 80083e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69b9      	ldr	r1, [r7, #24]
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	617b      	str	r3, [r7, #20]
   return(result);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b10      	cmp	r3, #16
 800840c:	d103      	bne.n	8008416 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2210      	movs	r2, #16
 8008414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff f89c 	bl	800755c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008424:	e00d      	b.n	8008442 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7f8 fd68 	bl	8000efc <HAL_UART_RxCpltCallback>
}
 800842c:	e009      	b.n	8008442 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	8b1b      	ldrh	r3, [r3, #24]
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0208 	orr.w	r2, r2, #8
 800843e:	b292      	uxth	r2, r2
 8008440:	831a      	strh	r2, [r3, #24]
}
 8008442:	bf00      	nop
 8008444:	3770      	adds	r7, #112	; 0x70
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40008000 	.word	0x40008000

08008450 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b09c      	sub	sp, #112	; 0x70
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800845e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008468:	2b22      	cmp	r3, #34	; 0x22
 800846a:	f040 80be 	bne.w	80085ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008474:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800847e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008482:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008486:	4013      	ands	r3, r2
 8008488:	b29a      	uxth	r2, r3
 800848a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800848c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008492:	1c9a      	adds	r2, r3, #2
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800849e:	b29b      	uxth	r3, r3
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 80a3 	bne.w	80085fe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084cc:	667b      	str	r3, [r7, #100]	; 0x64
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d6:	657b      	str	r3, [r7, #84]	; 0x54
 80084d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e6      	bne.n	80084b8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	663b      	str	r3, [r7, #96]	; 0x60
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800850a:	643a      	str	r2, [r7, #64]	; 0x40
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a34      	ldr	r2, [pc, #208]	; (8008608 <UART_RxISR_16BIT+0x1b8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d01f      	beq.n	800857c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d018      	beq.n	800857c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	61fb      	str	r3, [r7, #28]
   return(result);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800856a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008580:	2b01      	cmp	r3, #1
 8008582:	d12e      	bne.n	80085e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	60bb      	str	r3, [r7, #8]
   return(result);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f023 0310 	bic.w	r3, r3, #16
 800859e:	65bb      	str	r3, [r7, #88]	; 0x58
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085a8:	61bb      	str	r3, [r7, #24]
 80085aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6979      	ldr	r1, [r7, #20]
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	613b      	str	r3, [r7, #16]
   return(result);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f003 0310 	and.w	r3, r3, #16
 80085c6:	2b10      	cmp	r3, #16
 80085c8:	d103      	bne.n	80085d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2210      	movs	r2, #16
 80085d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe ffbe 	bl	800755c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085e0:	e00d      	b.n	80085fe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7f8 fc8a 	bl	8000efc <HAL_UART_RxCpltCallback>
}
 80085e8:	e009      	b.n	80085fe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	8b1b      	ldrh	r3, [r3, #24]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0208 	orr.w	r2, r2, #8
 80085fa:	b292      	uxth	r2, r2
 80085fc:	831a      	strh	r2, [r3, #24]
}
 80085fe:	bf00      	nop
 8008600:	3770      	adds	r7, #112	; 0x70
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40008000 	.word	0x40008000

0800860c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <arm_rfft_32_fast_init_f32>:
 8008620:	b178      	cbz	r0, 8008642 <arm_rfft_32_fast_init_f32+0x22>
 8008622:	b430      	push	{r4, r5}
 8008624:	4908      	ldr	r1, [pc, #32]	; (8008648 <arm_rfft_32_fast_init_f32+0x28>)
 8008626:	4a09      	ldr	r2, [pc, #36]	; (800864c <arm_rfft_32_fast_init_f32+0x2c>)
 8008628:	2310      	movs	r3, #16
 800862a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800862e:	8003      	strh	r3, [r0, #0]
 8008630:	2520      	movs	r5, #32
 8008632:	2414      	movs	r4, #20
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <arm_rfft_32_fast_init_f32+0x30>)
 8008636:	8205      	strh	r5, [r0, #16]
 8008638:	8184      	strh	r4, [r0, #12]
 800863a:	6143      	str	r3, [r0, #20]
 800863c:	bc30      	pop	{r4, r5}
 800863e:	2000      	movs	r0, #0
 8008640:	4770      	bx	lr
 8008642:	f04f 30ff 	mov.w	r0, #4294967295
 8008646:	4770      	bx	lr
 8008648:	0800a978 	.word	0x0800a978
 800864c:	0800f2b0 	.word	0x0800f2b0
 8008650:	08018030 	.word	0x08018030

08008654 <arm_rfft_64_fast_init_f32>:
 8008654:	b178      	cbz	r0, 8008676 <arm_rfft_64_fast_init_f32+0x22>
 8008656:	b430      	push	{r4, r5}
 8008658:	4908      	ldr	r1, [pc, #32]	; (800867c <arm_rfft_64_fast_init_f32+0x28>)
 800865a:	4a09      	ldr	r2, [pc, #36]	; (8008680 <arm_rfft_64_fast_init_f32+0x2c>)
 800865c:	2320      	movs	r3, #32
 800865e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008662:	8003      	strh	r3, [r0, #0]
 8008664:	2540      	movs	r5, #64	; 0x40
 8008666:	2430      	movs	r4, #48	; 0x30
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <arm_rfft_64_fast_init_f32+0x30>)
 800866a:	8205      	strh	r5, [r0, #16]
 800866c:	8184      	strh	r4, [r0, #12]
 800866e:	6143      	str	r3, [r0, #20]
 8008670:	bc30      	pop	{r4, r5}
 8008672:	2000      	movs	r0, #0
 8008674:	4770      	bx	lr
 8008676:	f04f 30ff 	mov.w	r0, #4294967295
 800867a:	4770      	bx	lr
 800867c:	0800cad0 	.word	0x0800cad0
 8008680:	08013b30 	.word	0x08013b30
 8008684:	0801c8b0 	.word	0x0801c8b0

08008688 <arm_rfft_256_fast_init_f32>:
 8008688:	b180      	cbz	r0, 80086ac <arm_rfft_256_fast_init_f32+0x24>
 800868a:	b430      	push	{r4, r5}
 800868c:	4909      	ldr	r1, [pc, #36]	; (80086b4 <arm_rfft_256_fast_init_f32+0x2c>)
 800868e:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <arm_rfft_256_fast_init_f32+0x30>)
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008696:	8003      	strh	r3, [r0, #0]
 8008698:	f44f 7580 	mov.w	r5, #256	; 0x100
 800869c:	24d0      	movs	r4, #208	; 0xd0
 800869e:	4b07      	ldr	r3, [pc, #28]	; (80086bc <arm_rfft_256_fast_init_f32+0x34>)
 80086a0:	8205      	strh	r5, [r0, #16]
 80086a2:	8184      	strh	r4, [r0, #12]
 80086a4:	6143      	str	r3, [r0, #20]
 80086a6:	bc30      	pop	{r4, r5}
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	0800a7d8 	.word	0x0800a7d8
 80086b8:	0800eeb0 	.word	0x0800eeb0
 80086bc:	08017c30 	.word	0x08017c30

080086c0 <arm_rfft_512_fast_init_f32>:
 80086c0:	b190      	cbz	r0, 80086e8 <arm_rfft_512_fast_init_f32+0x28>
 80086c2:	b430      	push	{r4, r5}
 80086c4:	490a      	ldr	r1, [pc, #40]	; (80086f0 <arm_rfft_512_fast_init_f32+0x30>)
 80086c6:	4a0b      	ldr	r2, [pc, #44]	; (80086f4 <arm_rfft_512_fast_init_f32+0x34>)
 80086c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086cc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80086d0:	8003      	strh	r3, [r0, #0]
 80086d2:	f44f 7500 	mov.w	r5, #512	; 0x200
 80086d6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <arm_rfft_512_fast_init_f32+0x38>)
 80086dc:	8205      	strh	r5, [r0, #16]
 80086de:	8184      	strh	r4, [r0, #12]
 80086e0:	6143      	str	r3, [r0, #20]
 80086e2:	bc30      	pop	{r4, r5}
 80086e4:	2000      	movs	r0, #0
 80086e6:	4770      	bx	lr
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	0800c760 	.word	0x0800c760
 80086f4:	08013330 	.word	0x08013330
 80086f8:	0801c0b0 	.word	0x0801c0b0

080086fc <arm_rfft_1024_fast_init_f32>:
 80086fc:	b190      	cbz	r0, 8008724 <arm_rfft_1024_fast_init_f32+0x28>
 80086fe:	b430      	push	{r4, r5}
 8008700:	490a      	ldr	r1, [pc, #40]	; (800872c <arm_rfft_1024_fast_init_f32+0x30>)
 8008702:	4a0b      	ldr	r2, [pc, #44]	; (8008730 <arm_rfft_1024_fast_init_f32+0x34>)
 8008704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008708:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800870c:	8003      	strh	r3, [r0, #0]
 800870e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8008712:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008716:	4b07      	ldr	r3, [pc, #28]	; (8008734 <arm_rfft_1024_fast_init_f32+0x38>)
 8008718:	8205      	strh	r5, [r0, #16]
 800871a:	8184      	strh	r4, [r0, #12]
 800871c:	6143      	str	r3, [r0, #20]
 800871e:	bc30      	pop	{r4, r5}
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr
 8008724:	f04f 30ff 	mov.w	r0, #4294967295
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	0800cb30 	.word	0x0800cb30
 8008730:	08013c30 	.word	0x08013c30
 8008734:	08014c30 	.word	0x08014c30

08008738 <arm_rfft_2048_fast_init_f32>:
 8008738:	b190      	cbz	r0, 8008760 <arm_rfft_2048_fast_init_f32+0x28>
 800873a:	b430      	push	{r4, r5}
 800873c:	490a      	ldr	r1, [pc, #40]	; (8008768 <arm_rfft_2048_fast_init_f32+0x30>)
 800873e:	4a0b      	ldr	r2, [pc, #44]	; (800876c <arm_rfft_2048_fast_init_f32+0x34>)
 8008740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008744:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008748:	8003      	strh	r3, [r0, #0]
 800874a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800874e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <arm_rfft_2048_fast_init_f32+0x38>)
 8008754:	8205      	strh	r5, [r0, #16]
 8008756:	8184      	strh	r4, [r0, #12]
 8008758:	6143      	str	r3, [r0, #20]
 800875a:	bc30      	pop	{r4, r5}
 800875c:	2000      	movs	r0, #0
 800875e:	4770      	bx	lr
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	080099c8 	.word	0x080099c8
 800876c:	0800ceb0 	.word	0x0800ceb0
 8008770:	08015c30 	.word	0x08015c30

08008774 <arm_rfft_4096_fast_init_f32>:
 8008774:	b190      	cbz	r0, 800879c <arm_rfft_4096_fast_init_f32+0x28>
 8008776:	b430      	push	{r4, r5}
 8008778:	490a      	ldr	r1, [pc, #40]	; (80087a4 <arm_rfft_4096_fast_init_f32+0x30>)
 800877a:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <arm_rfft_4096_fast_init_f32+0x34>)
 800877c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008780:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008784:	8003      	strh	r3, [r0, #0]
 8008786:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800878a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <arm_rfft_4096_fast_init_f32+0x38>)
 8008790:	8205      	strh	r5, [r0, #16]
 8008792:	8184      	strh	r4, [r0, #12]
 8008794:	6143      	str	r3, [r0, #20]
 8008796:	bc30      	pop	{r4, r5}
 8008798:	2000      	movs	r0, #0
 800879a:	4770      	bx	lr
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	0800a9a0 	.word	0x0800a9a0
 80087a8:	0800f330 	.word	0x0800f330
 80087ac:	080180b0 	.word	0x080180b0

080087b0 <arm_rfft_fast_init_f32>:
 80087b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80087b4:	d01f      	beq.n	80087f6 <arm_rfft_fast_init_f32+0x46>
 80087b6:	d90b      	bls.n	80087d0 <arm_rfft_fast_init_f32+0x20>
 80087b8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80087bc:	d019      	beq.n	80087f2 <arm_rfft_fast_init_f32+0x42>
 80087be:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80087c2:	d012      	beq.n	80087ea <arm_rfft_fast_init_f32+0x3a>
 80087c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80087c8:	d00d      	beq.n	80087e6 <arm_rfft_fast_init_f32+0x36>
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	4770      	bx	lr
 80087d0:	2940      	cmp	r1, #64	; 0x40
 80087d2:	d00c      	beq.n	80087ee <arm_rfft_fast_init_f32+0x3e>
 80087d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80087d8:	d003      	beq.n	80087e2 <arm_rfft_fast_init_f32+0x32>
 80087da:	2920      	cmp	r1, #32
 80087dc:	d1f5      	bne.n	80087ca <arm_rfft_fast_init_f32+0x1a>
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <arm_rfft_fast_init_f32+0x4c>)
 80087e0:	4718      	bx	r3
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <arm_rfft_fast_init_f32+0x50>)
 80087e4:	4718      	bx	r3
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <arm_rfft_fast_init_f32+0x54>)
 80087e8:	4718      	bx	r3
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <arm_rfft_fast_init_f32+0x58>)
 80087ec:	4718      	bx	r3
 80087ee:	4b07      	ldr	r3, [pc, #28]	; (800880c <arm_rfft_fast_init_f32+0x5c>)
 80087f0:	e7f6      	b.n	80087e0 <arm_rfft_fast_init_f32+0x30>
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <arm_rfft_fast_init_f32+0x60>)
 80087f4:	e7f4      	b.n	80087e0 <arm_rfft_fast_init_f32+0x30>
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <arm_rfft_fast_init_f32+0x64>)
 80087f8:	e7f2      	b.n	80087e0 <arm_rfft_fast_init_f32+0x30>
 80087fa:	bf00      	nop
 80087fc:	08008621 	.word	0x08008621
 8008800:	08008689 	.word	0x08008689
 8008804:	080086fd 	.word	0x080086fd
 8008808:	08008775 	.word	0x08008775
 800880c:	08008655 	.word	0x08008655
 8008810:	08008739 	.word	0x08008739
 8008814:	080086c1 	.word	0x080086c1

08008818 <stage_rfft_f32>:
 8008818:	b410      	push	{r4}
 800881a:	edd1 7a00 	vldr	s15, [r1]
 800881e:	ed91 7a01 	vldr	s14, [r1, #4]
 8008822:	8804      	ldrh	r4, [r0, #0]
 8008824:	6940      	ldr	r0, [r0, #20]
 8008826:	ee37 7a07 	vadd.f32	s14, s14, s14
 800882a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800882e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008832:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800883a:	3c01      	subs	r4, #1
 800883c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008840:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008844:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008848:	ed82 7a00 	vstr	s14, [r2]
 800884c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008850:	3010      	adds	r0, #16
 8008852:	3210      	adds	r2, #16
 8008854:	3b08      	subs	r3, #8
 8008856:	3110      	adds	r1, #16
 8008858:	ed11 5a02 	vldr	s10, [r1, #-8]
 800885c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008860:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008864:	edd3 4a03 	vldr	s9, [r3, #12]
 8008868:	ed51 7a01 	vldr	s15, [r1, #-4]
 800886c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008870:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008874:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008878:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800887c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008880:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008884:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008888:	ee37 7a23 	vadd.f32	s14, s14, s7
 800888c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008890:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008894:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008898:	ee37 7a06 	vadd.f32	s14, s14, s12
 800889c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80088a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80088a8:	3c01      	subs	r4, #1
 80088aa:	ed02 7a02 	vstr	s14, [r2, #-8]
 80088ae:	ed42 7a01 	vstr	s15, [r2, #-4]
 80088b2:	f1a3 0308 	sub.w	r3, r3, #8
 80088b6:	f101 0108 	add.w	r1, r1, #8
 80088ba:	f100 0008 	add.w	r0, r0, #8
 80088be:	f102 0208 	add.w	r2, r2, #8
 80088c2:	d1c9      	bne.n	8008858 <stage_rfft_f32+0x40>
 80088c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <merge_rfft_f32>:
 80088cc:	b410      	push	{r4}
 80088ce:	edd1 7a00 	vldr	s15, [r1]
 80088d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80088d6:	8804      	ldrh	r4, [r0, #0]
 80088d8:	6940      	ldr	r0, [r0, #20]
 80088da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80088de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088e2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80088e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80088ea:	ee67 7a84 	vmul.f32	s15, s15, s8
 80088ee:	3c01      	subs	r4, #1
 80088f0:	ed82 7a00 	vstr	s14, [r2]
 80088f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80088f8:	b3dc      	cbz	r4, 8008972 <merge_rfft_f32+0xa6>
 80088fa:	00e3      	lsls	r3, r4, #3
 80088fc:	3b08      	subs	r3, #8
 80088fe:	440b      	add	r3, r1
 8008900:	3010      	adds	r0, #16
 8008902:	3210      	adds	r2, #16
 8008904:	3110      	adds	r1, #16
 8008906:	ed11 5a02 	vldr	s10, [r1, #-8]
 800890a:	ed93 7a02 	vldr	s14, [r3, #8]
 800890e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008912:	edd3 4a03 	vldr	s9, [r3, #12]
 8008916:	ed51 7a01 	vldr	s15, [r1, #-4]
 800891a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800891e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008922:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008926:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800892a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800892e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008932:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008936:	ee37 7a63 	vsub.f32	s14, s14, s7
 800893a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800893e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008942:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008946:	ee37 7a46 	vsub.f32	s14, s14, s12
 800894a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800894e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008952:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008956:	3c01      	subs	r4, #1
 8008958:	ed02 7a02 	vstr	s14, [r2, #-8]
 800895c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008960:	f1a3 0308 	sub.w	r3, r3, #8
 8008964:	f101 0108 	add.w	r1, r1, #8
 8008968:	f100 0008 	add.w	r0, r0, #8
 800896c:	f102 0208 	add.w	r2, r2, #8
 8008970:	d1c9      	bne.n	8008906 <merge_rfft_f32+0x3a>
 8008972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008976:	4770      	bx	lr

08008978 <arm_rfft_fast_f32>:
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897c:	8a05      	ldrh	r5, [r0, #16]
 800897e:	086d      	lsrs	r5, r5, #1
 8008980:	8005      	strh	r5, [r0, #0]
 8008982:	4604      	mov	r4, r0
 8008984:	4616      	mov	r6, r2
 8008986:	461d      	mov	r5, r3
 8008988:	b14b      	cbz	r3, 800899e <arm_rfft_fast_f32+0x26>
 800898a:	f7ff ff9f 	bl	80088cc <merge_rfft_f32>
 800898e:	462a      	mov	r2, r5
 8008990:	4631      	mov	r1, r6
 8008992:	4620      	mov	r0, r4
 8008994:	2301      	movs	r3, #1
 8008996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	f000 bb33 	b.w	8009004 <arm_cfft_f32>
 800899e:	460f      	mov	r7, r1
 80089a0:	461a      	mov	r2, r3
 80089a2:	2301      	movs	r3, #1
 80089a4:	f000 fb2e 	bl	8009004 <arm_cfft_f32>
 80089a8:	4632      	mov	r2, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	4620      	mov	r0, r4
 80089ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	f7ff bf31 	b.w	8008818 <stage_rfft_f32>
 80089b6:	bf00      	nop

080089b8 <arm_cfft_radix8by2_f32>:
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	ed2d 8b08 	vpush	{d8-d11}
 80089c0:	4607      	mov	r7, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	f8b7 c000 	ldrh.w	ip, [r7]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80089ce:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80089d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80089d6:	f000 80b0 	beq.w	8008b3a <arm_cfft_radix8by2_f32+0x182>
 80089da:	008c      	lsls	r4, r1, #2
 80089dc:	3410      	adds	r4, #16
 80089de:	f100 0310 	add.w	r3, r0, #16
 80089e2:	1906      	adds	r6, r0, r4
 80089e4:	3210      	adds	r2, #16
 80089e6:	4444      	add	r4, r8
 80089e8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80089ec:	f108 0510 	add.w	r5, r8, #16
 80089f0:	ed15 2a04 	vldr	s4, [r5, #-16]
 80089f4:	ed55 2a03 	vldr	s5, [r5, #-12]
 80089f8:	ed54 4a04 	vldr	s9, [r4, #-16]
 80089fc:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008a00:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008a04:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008a08:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008a0c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008a10:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008a14:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008a18:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008a1c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008a20:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008a24:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008a28:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008a2c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008a30:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008a34:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008a38:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008a3c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008a40:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008a44:	ee75 aa00 	vadd.f32	s21, s10, s0
 8008a48:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8008a4c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008a50:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008a54:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008a58:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008a5c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008a60:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008a64:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008a68:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008a6c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008a70:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008a74:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008a78:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008a7c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008a80:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008a84:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008a88:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008a8c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008a90:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008a94:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008a98:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008a9c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008aa0:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008aa4:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008aa8:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008aac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008ab0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008ab4:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008ab8:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008abc:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008ac0:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008ac4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008ac8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008acc:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008ad0:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008ad4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008ad8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008adc:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008ae0:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008ae4:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008ae8:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008aec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008af0:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008af4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008af8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008afc:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008b00:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008b04:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008b08:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008b0c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008b10:	3310      	adds	r3, #16
 8008b12:	4563      	cmp	r3, ip
 8008b14:	ed45 5a02 	vstr	s11, [r5, #-8]
 8008b18:	f106 0610 	add.w	r6, r6, #16
 8008b1c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008b20:	f102 0210 	add.w	r2, r2, #16
 8008b24:	ed04 6a02 	vstr	s12, [r4, #-8]
 8008b28:	ed04 7a01 	vstr	s14, [r4, #-4]
 8008b2c:	f105 0510 	add.w	r5, r5, #16
 8008b30:	f104 0410 	add.w	r4, r4, #16
 8008b34:	f47f af5c 	bne.w	80089f0 <arm_cfft_radix8by2_f32+0x38>
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	b28c      	uxth	r4, r1
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	2302      	movs	r3, #2
 8008b40:	f000 faf8 	bl	8009134 <arm_radix8_butterfly_f32>
 8008b44:	ecbd 8b08 	vpop	{d8-d11}
 8008b48:	4621      	mov	r1, r4
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	f000 baee 	b.w	8009134 <arm_radix8_butterfly_f32>

08008b58 <arm_cfft_radix8by4_f32>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b0a 	vpush	{d8-d12}
 8008b60:	b08d      	sub	sp, #52	; 0x34
 8008b62:	460d      	mov	r5, r1
 8008b64:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b66:	8801      	ldrh	r1, [r0, #0]
 8008b68:	6842      	ldr	r2, [r0, #4]
 8008b6a:	900a      	str	r0, [sp, #40]	; 0x28
 8008b6c:	0849      	lsrs	r1, r1, #1
 8008b6e:	008b      	lsls	r3, r1, #2
 8008b70:	18ee      	adds	r6, r5, r3
 8008b72:	18f0      	adds	r0, r6, r3
 8008b74:	edd0 5a00 	vldr	s11, [r0]
 8008b78:	edd5 7a00 	vldr	s15, [r5]
 8008b7c:	ed96 7a00 	vldr	s14, [r6]
 8008b80:	edd0 3a01 	vldr	s7, [r0, #4]
 8008b84:	ed96 4a01 	vldr	s8, [r6, #4]
 8008b88:	ed95 5a01 	vldr	s10, [r5, #4]
 8008b8c:	9008      	str	r0, [sp, #32]
 8008b8e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008b92:	18c7      	adds	r7, r0, r3
 8008b94:	edd7 4a00 	vldr	s9, [r7]
 8008b98:	ed97 3a01 	vldr	s6, [r7, #4]
 8008b9c:	9701      	str	r7, [sp, #4]
 8008b9e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008ba2:	462c      	mov	r4, r5
 8008ba4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008ba8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008bac:	ee16 ca90 	vmov	ip, s13
 8008bb0:	f844 cb08 	str.w	ip, [r4], #8
 8008bb4:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008bb8:	edd6 5a01 	vldr	s11, [r6, #4]
 8008bbc:	edd7 2a01 	vldr	s5, [r7, #4]
 8008bc0:	9404      	str	r4, [sp, #16]
 8008bc2:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008bc6:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008bca:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008bce:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008bd2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008bd6:	0849      	lsrs	r1, r1, #1
 8008bd8:	f102 0e08 	add.w	lr, r2, #8
 8008bdc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008be0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008be4:	9109      	str	r1, [sp, #36]	; 0x24
 8008be6:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008bea:	f1a1 0902 	sub.w	r9, r1, #2
 8008bee:	f8cd e00c 	str.w	lr, [sp, #12]
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	ee13 ea90 	vmov	lr, s7
 8008bf8:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008bfc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008c00:	4604      	mov	r4, r0
 8008c02:	edc5 5a01 	vstr	s11, [r5, #4]
 8008c06:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008c0a:	f841 eb08 	str.w	lr, [r1], #8
 8008c0e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8008c12:	ee16 ea10 	vmov	lr, s12
 8008c16:	ed86 5a01 	vstr	s10, [r6, #4]
 8008c1a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008c1e:	f844 eb08 	str.w	lr, [r4], #8
 8008c22:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008c26:	edc0 6a01 	vstr	s13, [r0, #4]
 8008c2a:	9405      	str	r4, [sp, #20]
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	ee17 0a90 	vmov	r0, s15
 8008c32:	9106      	str	r1, [sp, #24]
 8008c34:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008c38:	f102 0110 	add.w	r1, r2, #16
 8008c3c:	46bc      	mov	ip, r7
 8008c3e:	9100      	str	r1, [sp, #0]
 8008c40:	f847 0b08 	str.w	r0, [r7], #8
 8008c44:	f102 0118 	add.w	r1, r2, #24
 8008c48:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8008c4c:	9102      	str	r1, [sp, #8]
 8008c4e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008c52:	9007      	str	r0, [sp, #28]
 8008c54:	f000 8134 	beq.w	8008ec0 <arm_cfft_radix8by4_f32+0x368>
 8008c58:	f102 0920 	add.w	r9, r2, #32
 8008c5c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	f8dd a000 	ldr.w	sl, [sp]
 8008c66:	3b0c      	subs	r3, #12
 8008c68:	4683      	mov	fp, r0
 8008c6a:	4463      	add	r3, ip
 8008c6c:	f105 0e10 	add.w	lr, r5, #16
 8008c70:	f1a4 010c 	sub.w	r1, r4, #12
 8008c74:	f104 0510 	add.w	r5, r4, #16
 8008c78:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008c7c:	f1a2 040c 	sub.w	r4, r2, #12
 8008c80:	f106 0010 	add.w	r0, r6, #16
 8008c84:	3210      	adds	r2, #16
 8008c86:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008c8a:	ed55 5a02 	vldr	s11, [r5, #-8]
 8008c8e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008c92:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008c96:	ed55 6a01 	vldr	s13, [r5, #-4]
 8008c9a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008c9e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8008ca2:	ed10 8a01 	vldr	s16, [r0, #-4]
 8008ca6:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008caa:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008cae:	ee37 7a84 	vadd.f32	s14, s15, s8
 8008cb2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008cb6:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008cba:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008cbe:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8008cc2:	ed10 7a01 	vldr	s14, [r0, #-4]
 8008cc6:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008cca:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008cce:	ee78 aa25 	vadd.f32	s21, s16, s11
 8008cd2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008cd6:	ee70 3a67 	vsub.f32	s7, s0, s15
 8008cda:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8008cde:	ed94 7a02 	vldr	s14, [r4, #8]
 8008ce2:	ed9c 2a02 	vldr	s4, [ip, #8]
 8008ce6:	ed91 ba02 	vldr	s22, [r1, #8]
 8008cea:	edd3 9a02 	vldr	s19, [r3, #8]
 8008cee:	edd4 2a01 	vldr	s5, [r4, #4]
 8008cf2:	ed9c 9a01 	vldr	s18, [ip, #4]
 8008cf6:	ed93 5a01 	vldr	s10, [r3, #4]
 8008cfa:	edd1 0a01 	vldr	s1, [r1, #4]
 8008cfe:	ee72 6a07 	vadd.f32	s13, s4, s14
 8008d02:	ee32 2a47 	vsub.f32	s4, s4, s14
 8008d06:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8008d0a:	ee79 4a22 	vadd.f32	s9, s18, s5
 8008d0e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8008d12:	ee79 2a62 	vsub.f32	s5, s18, s5
 8008d16:	ed8c 7a02 	vstr	s14, [ip, #8]
 8008d1a:	ed91 7a01 	vldr	s14, [r1, #4]
 8008d1e:	edd3 8a01 	vldr	s17, [r3, #4]
 8008d22:	ee34 7a87 	vadd.f32	s14, s9, s14
 8008d26:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8008d2a:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008d2e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8008d32:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008d36:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8008d3a:	ed1a aa02 	vldr	s20, [sl, #-8]
 8008d3e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8008d42:	ee39 9a05 	vadd.f32	s18, s18, s10
 8008d46:	ee7a aac1 	vsub.f32	s21, s21, s2
 8008d4a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008d4e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8008d52:	ee69 ba07 	vmul.f32	s23, s18, s14
 8008d56:	ee6a aa87 	vmul.f32	s21, s21, s14
 8008d5a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008d5e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8008d62:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8008d66:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8008d6a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008d6e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8008d72:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008d76:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008d7a:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008d7e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8008d82:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008d86:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008d8a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008d8e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8008d92:	ed40 3a01 	vstr	s7, [r0, #-4]
 8008d96:	edc1 8a01 	vstr	s17, [r1, #4]
 8008d9a:	ed81 aa02 	vstr	s20, [r1, #8]
 8008d9e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8008da2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008da6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008daa:	ed59 6a03 	vldr	s13, [r9, #-12]
 8008dae:	ee34 4a61 	vsub.f32	s8, s8, s3
 8008db2:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008db6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008dba:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008dbe:	ee24 9a23 	vmul.f32	s18, s8, s7
 8008dc2:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008dc6:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008dca:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008dce:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8008dd2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8008dd6:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008dda:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008dde:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8008de2:	ee79 3a29 	vadd.f32	s7, s18, s19
 8008de6:	ee75 6a60 	vsub.f32	s13, s10, s1
 8008dea:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008dee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008df2:	ed45 3a02 	vstr	s7, [r5, #-8]
 8008df6:	ed05 6a01 	vstr	s12, [r5, #-4]
 8008dfa:	ed84 7a01 	vstr	s14, [r4, #4]
 8008dfe:	ed84 4a02 	vstr	s8, [r4, #8]
 8008e02:	ee35 6a81 	vadd.f32	s12, s11, s2
 8008e06:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8008e0a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8008e0e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8008e12:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008e16:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8008e1a:	ee67 2a26 	vmul.f32	s5, s14, s13
 8008e1e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008e22:	ee26 5a25 	vmul.f32	s10, s12, s11
 8008e26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008e2a:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008e2e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008e32:	ee63 6a26 	vmul.f32	s13, s6, s13
 8008e36:	ee23 3a25 	vmul.f32	s6, s6, s11
 8008e3a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008e3e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8008e42:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8008e46:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008e4a:	f1bb 0b01 	subs.w	fp, fp, #1
 8008e4e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8008e52:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008e56:	f10e 0e08 	add.w	lr, lr, #8
 8008e5a:	ed83 3a02 	vstr	s6, [r3, #8]
 8008e5e:	ed83 7a01 	vstr	s14, [r3, #4]
 8008e62:	f1ac 0c08 	sub.w	ip, ip, #8
 8008e66:	f10a 0a08 	add.w	sl, sl, #8
 8008e6a:	f100 0008 	add.w	r0, r0, #8
 8008e6e:	f1a1 0108 	sub.w	r1, r1, #8
 8008e72:	f109 0910 	add.w	r9, r9, #16
 8008e76:	f105 0508 	add.w	r5, r5, #8
 8008e7a:	f1a4 0408 	sub.w	r4, r4, #8
 8008e7e:	f108 0818 	add.w	r8, r8, #24
 8008e82:	f102 0208 	add.w	r2, r2, #8
 8008e86:	f1a3 0308 	sub.w	r3, r3, #8
 8008e8a:	f47f aefc 	bne.w	8008c86 <arm_cfft_radix8by4_f32+0x12e>
 8008e8e:	9907      	ldr	r1, [sp, #28]
 8008e90:	9800      	ldr	r0, [sp, #0]
 8008e92:	00cb      	lsls	r3, r1, #3
 8008e94:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008e98:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008e9c:	9100      	str	r1, [sp, #0]
 8008e9e:	9904      	ldr	r1, [sp, #16]
 8008ea0:	4419      	add	r1, r3
 8008ea2:	9104      	str	r1, [sp, #16]
 8008ea4:	9903      	ldr	r1, [sp, #12]
 8008ea6:	4419      	add	r1, r3
 8008ea8:	9103      	str	r1, [sp, #12]
 8008eaa:	9906      	ldr	r1, [sp, #24]
 8008eac:	4419      	add	r1, r3
 8008eae:	9106      	str	r1, [sp, #24]
 8008eb0:	9905      	ldr	r1, [sp, #20]
 8008eb2:	441f      	add	r7, r3
 8008eb4:	4419      	add	r1, r3
 8008eb6:	9b02      	ldr	r3, [sp, #8]
 8008eb8:	9105      	str	r1, [sp, #20]
 8008eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebe:	9302      	str	r3, [sp, #8]
 8008ec0:	9904      	ldr	r1, [sp, #16]
 8008ec2:	9805      	ldr	r0, [sp, #20]
 8008ec4:	ed91 4a00 	vldr	s8, [r1]
 8008ec8:	edd0 6a00 	vldr	s13, [r0]
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	ed97 3a00 	vldr	s6, [r7]
 8008ed2:	edd3 7a00 	vldr	s15, [r3]
 8008ed6:	edd0 4a01 	vldr	s9, [r0, #4]
 8008eda:	edd1 3a01 	vldr	s7, [r1, #4]
 8008ede:	ed97 2a01 	vldr	s4, [r7, #4]
 8008ee2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8008eec:	ee34 6a26 	vadd.f32	s12, s8, s13
 8008ef0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8008ef4:	ee37 5a86 	vadd.f32	s10, s15, s12
 8008ef8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008efc:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008f00:	ee74 6a66 	vsub.f32	s13, s8, s13
 8008f04:	ed81 5a00 	vstr	s10, [r1]
 8008f08:	ed93 5a01 	vldr	s10, [r3, #4]
 8008f0c:	edd7 4a01 	vldr	s9, [r7, #4]
 8008f10:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008f14:	ee37 4a26 	vadd.f32	s8, s14, s13
 8008f18:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008f1c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8008f20:	ed81 5a01 	vstr	s10, [r1, #4]
 8008f24:	edd2 1a00 	vldr	s3, [r2]
 8008f28:	edd2 2a01 	vldr	s5, [r2, #4]
 8008f2c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008f30:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008f34:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008f38:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008f3c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008f40:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008f44:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008f48:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008f4c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008f50:	edc3 2a00 	vstr	s5, [r3]
 8008f54:	ed83 5a01 	vstr	s10, [r3, #4]
 8008f58:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008f62:	ed93 4a01 	vldr	s8, [r3, #4]
 8008f66:	ed93 5a00 	vldr	s10, [r3]
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008f70:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008f74:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008f78:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008f7c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008f80:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008f84:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008f88:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008f8c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008f90:	ed80 6a01 	vstr	s12, [r0, #4]
 8008f94:	edc0 5a00 	vstr	s11, [r0]
 8008f98:	edd3 5a01 	vldr	s11, [r3, #4]
 8008f9c:	edd3 6a00 	vldr	s13, [r3]
 8008fa0:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008fa4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8008fa8:	ee27 6a26 	vmul.f32	s12, s14, s13
 8008fac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008fb0:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008fb4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008fb8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008fbc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008fc0:	ed87 7a01 	vstr	s14, [r7, #4]
 8008fc4:	edc7 7a00 	vstr	s15, [r7]
 8008fc8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8008fcc:	4621      	mov	r1, r4
 8008fce:	686a      	ldr	r2, [r5, #4]
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	f000 f8af 	bl	8009134 <arm_radix8_butterfly_f32>
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4621      	mov	r1, r4
 8008fda:	686a      	ldr	r2, [r5, #4]
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f000 f8a9 	bl	8009134 <arm_radix8_butterfly_f32>
 8008fe2:	9808      	ldr	r0, [sp, #32]
 8008fe4:	686a      	ldr	r2, [r5, #4]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f000 f8a3 	bl	8009134 <arm_radix8_butterfly_f32>
 8008fee:	686a      	ldr	r2, [r5, #4]
 8008ff0:	9801      	ldr	r0, [sp, #4]
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	b00d      	add	sp, #52	; 0x34
 8008ff8:	ecbd 8b0a 	vpop	{d8-d12}
 8008ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	f000 b898 	b.w	8009134 <arm_radix8_butterfly_f32>

08009004 <arm_cfft_f32>:
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	2a01      	cmp	r2, #1
 800900a:	4606      	mov	r6, r0
 800900c:	4617      	mov	r7, r2
 800900e:	460c      	mov	r4, r1
 8009010:	4698      	mov	r8, r3
 8009012:	8805      	ldrh	r5, [r0, #0]
 8009014:	d056      	beq.n	80090c4 <arm_cfft_f32+0xc0>
 8009016:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800901a:	d063      	beq.n	80090e4 <arm_cfft_f32+0xe0>
 800901c:	d916      	bls.n	800904c <arm_cfft_f32+0x48>
 800901e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009022:	d01a      	beq.n	800905a <arm_cfft_f32+0x56>
 8009024:	d947      	bls.n	80090b6 <arm_cfft_f32+0xb2>
 8009026:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800902a:	d05b      	beq.n	80090e4 <arm_cfft_f32+0xe0>
 800902c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009030:	d105      	bne.n	800903e <arm_cfft_f32+0x3a>
 8009032:	2301      	movs	r3, #1
 8009034:	6872      	ldr	r2, [r6, #4]
 8009036:	4629      	mov	r1, r5
 8009038:	4620      	mov	r0, r4
 800903a:	f000 f87b 	bl	8009134 <arm_radix8_butterfly_f32>
 800903e:	f1b8 0f00 	cmp.w	r8, #0
 8009042:	d111      	bne.n	8009068 <arm_cfft_f32+0x64>
 8009044:	2f01      	cmp	r7, #1
 8009046:	d016      	beq.n	8009076 <arm_cfft_f32+0x72>
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	2d20      	cmp	r5, #32
 800904e:	d049      	beq.n	80090e4 <arm_cfft_f32+0xe0>
 8009050:	d935      	bls.n	80090be <arm_cfft_f32+0xba>
 8009052:	2d40      	cmp	r5, #64	; 0x40
 8009054:	d0ed      	beq.n	8009032 <arm_cfft_f32+0x2e>
 8009056:	2d80      	cmp	r5, #128	; 0x80
 8009058:	d1f1      	bne.n	800903e <arm_cfft_f32+0x3a>
 800905a:	4621      	mov	r1, r4
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff fcab 	bl	80089b8 <arm_cfft_radix8by2_f32>
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	d0ed      	beq.n	8009044 <arm_cfft_f32+0x40>
 8009068:	68b2      	ldr	r2, [r6, #8]
 800906a:	89b1      	ldrh	r1, [r6, #12]
 800906c:	4620      	mov	r0, r4
 800906e:	f000 f841 	bl	80090f4 <arm_bitreversal_32>
 8009072:	2f01      	cmp	r7, #1
 8009074:	d1e8      	bne.n	8009048 <arm_cfft_f32+0x44>
 8009076:	ee07 5a90 	vmov	s15, r5
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009082:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009086:	2d00      	cmp	r5, #0
 8009088:	d0de      	beq.n	8009048 <arm_cfft_f32+0x44>
 800908a:	f104 0108 	add.w	r1, r4, #8
 800908e:	2300      	movs	r3, #0
 8009090:	3301      	adds	r3, #1
 8009092:	429d      	cmp	r5, r3
 8009094:	f101 0108 	add.w	r1, r1, #8
 8009098:	ed11 7a04 	vldr	s14, [r1, #-16]
 800909c:	ed51 7a03 	vldr	s15, [r1, #-12]
 80090a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80090a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80090a8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80090ac:	ed41 7a03 	vstr	s15, [r1, #-12]
 80090b0:	d1ee      	bne.n	8009090 <arm_cfft_f32+0x8c>
 80090b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80090ba:	d0ba      	beq.n	8009032 <arm_cfft_f32+0x2e>
 80090bc:	e7bf      	b.n	800903e <arm_cfft_f32+0x3a>
 80090be:	2d10      	cmp	r5, #16
 80090c0:	d0cb      	beq.n	800905a <arm_cfft_f32+0x56>
 80090c2:	e7bc      	b.n	800903e <arm_cfft_f32+0x3a>
 80090c4:	b19d      	cbz	r5, 80090ee <arm_cfft_f32+0xea>
 80090c6:	f101 030c 	add.w	r3, r1, #12
 80090ca:	2200      	movs	r2, #0
 80090cc:	ed53 7a02 	vldr	s15, [r3, #-8]
 80090d0:	3201      	adds	r2, #1
 80090d2:	eef1 7a67 	vneg.f32	s15, s15
 80090d6:	4295      	cmp	r5, r2
 80090d8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80090dc:	f103 0308 	add.w	r3, r3, #8
 80090e0:	d1f4      	bne.n	80090cc <arm_cfft_f32+0xc8>
 80090e2:	e798      	b.n	8009016 <arm_cfft_f32+0x12>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff fd36 	bl	8008b58 <arm_cfft_radix8by4_f32>
 80090ec:	e7a7      	b.n	800903e <arm_cfft_f32+0x3a>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0aa      	beq.n	8009048 <arm_cfft_f32+0x44>
 80090f2:	e7b9      	b.n	8009068 <arm_cfft_f32+0x64>

080090f4 <arm_bitreversal_32>:
 80090f4:	b1e9      	cbz	r1, 8009132 <arm_bitreversal_32+0x3e>
 80090f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f8:	2500      	movs	r5, #0
 80090fa:	f102 0e02 	add.w	lr, r2, #2
 80090fe:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009102:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009106:	08a4      	lsrs	r4, r4, #2
 8009108:	089b      	lsrs	r3, r3, #2
 800910a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800910e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009112:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009116:	00a6      	lsls	r6, r4, #2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800911e:	3304      	adds	r3, #4
 8009120:	1d34      	adds	r4, r6, #4
 8009122:	3502      	adds	r5, #2
 8009124:	58c6      	ldr	r6, [r0, r3]
 8009126:	5907      	ldr	r7, [r0, r4]
 8009128:	50c7      	str	r7, [r0, r3]
 800912a:	428d      	cmp	r5, r1
 800912c:	5106      	str	r6, [r0, r4]
 800912e:	d3e6      	bcc.n	80090fe <arm_bitreversal_32+0xa>
 8009130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009132:	4770      	bx	lr

08009134 <arm_radix8_butterfly_f32>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	ed2d 8b10 	vpush	{d8-d15}
 800913c:	b095      	sub	sp, #84	; 0x54
 800913e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009142:	4603      	mov	r3, r0
 8009144:	3304      	adds	r3, #4
 8009146:	ed9f bab9 	vldr	s22, [pc, #740]	; 800942c <arm_radix8_butterfly_f32+0x2f8>
 800914a:	9012      	str	r0, [sp, #72]	; 0x48
 800914c:	468b      	mov	fp, r1
 800914e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009150:	4689      	mov	r9, r1
 8009152:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009158:	960f      	str	r6, [sp, #60]	; 0x3c
 800915a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800915e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009162:	eb03 0508 	add.w	r5, r3, r8
 8009166:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800916a:	eb05 040e 	add.w	r4, r5, lr
 800916e:	0137      	lsls	r7, r6, #4
 8009170:	eba6 030a 	sub.w	r3, r6, sl
 8009174:	eb04 000e 	add.w	r0, r4, lr
 8009178:	44b2      	add	sl, r6
 800917a:	1d3a      	adds	r2, r7, #4
 800917c:	9702      	str	r7, [sp, #8]
 800917e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009182:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009186:	ebae 0c06 	sub.w	ip, lr, r6
 800918a:	9703      	str	r7, [sp, #12]
 800918c:	eb03 0708 	add.w	r7, r3, r8
 8009190:	9701      	str	r7, [sp, #4]
 8009192:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009196:	9706      	str	r7, [sp, #24]
 8009198:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800919a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800919e:	f10e 0104 	add.w	r1, lr, #4
 80091a2:	4439      	add	r1, r7
 80091a4:	443a      	add	r2, r7
 80091a6:	0137      	lsls	r7, r6, #4
 80091a8:	00f6      	lsls	r6, r6, #3
 80091aa:	9704      	str	r7, [sp, #16]
 80091ac:	9605      	str	r6, [sp, #20]
 80091ae:	9f01      	ldr	r7, [sp, #4]
 80091b0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80091b2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80091b6:	f04f 0c00 	mov.w	ip, #0
 80091ba:	edd4 6a00 	vldr	s13, [r4]
 80091be:	edd7 1a00 	vldr	s3, [r7]
 80091c2:	ed16 aa01 	vldr	s20, [r6, #-4]
 80091c6:	edd5 5a00 	vldr	s11, [r5]
 80091ca:	ed52 9a01 	vldr	s19, [r2, #-4]
 80091ce:	ed90 6a00 	vldr	s12, [r0]
 80091d2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80091d6:	ed93 3a00 	vldr	s6, [r3]
 80091da:	ee39 0a86 	vadd.f32	s0, s19, s12
 80091de:	ee33 2a21 	vadd.f32	s4, s6, s3
 80091e2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80091e6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80091ea:	ee35 7a02 	vadd.f32	s14, s10, s4
 80091ee:	ee34 4a80 	vadd.f32	s8, s9, s0
 80091f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091f6:	ee74 6a07 	vadd.f32	s13, s8, s14
 80091fa:	ee34 4a47 	vsub.f32	s8, s8, s14
 80091fe:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009202:	ed85 4a00 	vstr	s8, [r5]
 8009206:	edd1 6a00 	vldr	s13, [r1]
 800920a:	ed94 9a01 	vldr	s18, [r4, #4]
 800920e:	edd3 2a01 	vldr	s5, [r3, #4]
 8009212:	edd7 8a01 	vldr	s17, [r7, #4]
 8009216:	edd6 0a00 	vldr	s1, [r6]
 800921a:	edd5 3a01 	vldr	s7, [r5, #4]
 800921e:	ed90 8a01 	vldr	s16, [r0, #4]
 8009222:	ed92 7a00 	vldr	s14, [r2]
 8009226:	ee33 3a61 	vsub.f32	s6, s6, s3
 800922a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800922e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009232:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009236:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800923a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800923e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009242:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009246:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800924a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800924e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009252:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009256:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800925a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800925e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009262:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009266:	ee76 6a89 	vadd.f32	s13, s13, s18
 800926a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800926e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009272:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009276:	ee35 5a42 	vsub.f32	s10, s10, s4
 800927a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800927e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009282:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009286:	ee33 3a60 	vsub.f32	s6, s6, s1
 800928a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800928e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009292:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009296:	ee37 7a41 	vsub.f32	s14, s14, s2
 800929a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800929e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80092a2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80092a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80092aa:	ee32 8a00 	vadd.f32	s16, s4, s0
 80092ae:	ee33 1a45 	vsub.f32	s2, s6, s10
 80092b2:	ee32 2a40 	vsub.f32	s4, s4, s0
 80092b6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80092ba:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80092be:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80092c2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80092c6:	ee34 6a67 	vsub.f32	s12, s8, s15
 80092ca:	ee75 4a87 	vadd.f32	s9, s11, s14
 80092ce:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80092d2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80092d6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80092da:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80092de:	44dc      	add	ip, fp
 80092e0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80092e4:	45e1      	cmp	r9, ip
 80092e6:	ed86 8a00 	vstr	s16, [r6]
 80092ea:	ed85 2a01 	vstr	s4, [r5, #4]
 80092ee:	4456      	add	r6, sl
 80092f0:	ed02 0a01 	vstr	s0, [r2, #-4]
 80092f4:	4455      	add	r5, sl
 80092f6:	edc0 6a00 	vstr	s13, [r0]
 80092fa:	ed82 1a00 	vstr	s2, [r2]
 80092fe:	ed80 5a01 	vstr	s10, [r0, #4]
 8009302:	4452      	add	r2, sl
 8009304:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009308:	4450      	add	r0, sl
 800930a:	edc7 2a00 	vstr	s5, [r7]
 800930e:	edc4 4a00 	vstr	s9, [r4]
 8009312:	ed83 7a00 	vstr	s14, [r3]
 8009316:	edc1 5a00 	vstr	s11, [r1]
 800931a:	edc7 3a01 	vstr	s7, [r7, #4]
 800931e:	4451      	add	r1, sl
 8009320:	ed84 6a01 	vstr	s12, [r4, #4]
 8009324:	4457      	add	r7, sl
 8009326:	edc3 7a01 	vstr	s15, [r3, #4]
 800932a:	4454      	add	r4, sl
 800932c:	4453      	add	r3, sl
 800932e:	f63f af44 	bhi.w	80091ba <arm_radix8_butterfly_f32+0x86>
 8009332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009334:	2b07      	cmp	r3, #7
 8009336:	f240 81b7 	bls.w	80096a8 <arm_radix8_butterfly_f32+0x574>
 800933a:	9b06      	ldr	r3, [sp, #24]
 800933c:	9903      	ldr	r1, [sp, #12]
 800933e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009340:	9e05      	ldr	r6, [sp, #20]
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	f103 0c08 	add.w	ip, r3, #8
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	3108      	adds	r1, #8
 800934c:	f108 0808 	add.w	r8, r8, #8
 8009350:	1841      	adds	r1, r0, r1
 8009352:	3608      	adds	r6, #8
 8009354:	330c      	adds	r3, #12
 8009356:	4604      	mov	r4, r0
 8009358:	4444      	add	r4, r8
 800935a:	18c3      	adds	r3, r0, r3
 800935c:	9109      	str	r1, [sp, #36]	; 0x24
 800935e:	1981      	adds	r1, r0, r6
 8009360:	f10e 0e08 	add.w	lr, lr, #8
 8009364:	3208      	adds	r2, #8
 8009366:	940b      	str	r4, [sp, #44]	; 0x2c
 8009368:	9107      	str	r1, [sp, #28]
 800936a:	4604      	mov	r4, r0
 800936c:	4601      	mov	r1, r0
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	f100 030c 	add.w	r3, r0, #12
 8009374:	4474      	add	r4, lr
 8009376:	f04f 0801 	mov.w	r8, #1
 800937a:	1882      	adds	r2, r0, r2
 800937c:	4461      	add	r1, ip
 800937e:	9305      	str	r3, [sp, #20]
 8009380:	464b      	mov	r3, r9
 8009382:	940a      	str	r4, [sp, #40]	; 0x28
 8009384:	46c1      	mov	r9, r8
 8009386:	9208      	str	r2, [sp, #32]
 8009388:	46d8      	mov	r8, fp
 800938a:	9106      	str	r1, [sp, #24]
 800938c:	f04f 0e00 	mov.w	lr, #0
 8009390:	469b      	mov	fp, r3
 8009392:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009396:	449e      	add	lr, r3
 8009398:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800939c:	441a      	add	r2, r3
 800939e:	920e      	str	r2, [sp, #56]	; 0x38
 80093a0:	441a      	add	r2, r3
 80093a2:	18d4      	adds	r4, r2, r3
 80093a4:	18e5      	adds	r5, r4, r3
 80093a6:	18ee      	adds	r6, r5, r3
 80093a8:	18f7      	adds	r7, r6, r3
 80093aa:	eb07 0c03 	add.w	ip, r7, r3
 80093ae:	920d      	str	r2, [sp, #52]	; 0x34
 80093b0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80093b4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80093b8:	910c      	str	r1, [sp, #48]	; 0x30
 80093ba:	4419      	add	r1, r3
 80093bc:	9103      	str	r1, [sp, #12]
 80093be:	4419      	add	r1, r3
 80093c0:	18ca      	adds	r2, r1, r3
 80093c2:	9202      	str	r2, [sp, #8]
 80093c4:	441a      	add	r2, r3
 80093c6:	18d0      	adds	r0, r2, r3
 80093c8:	ed92 ea01 	vldr	s28, [r2, #4]
 80093cc:	9a02      	ldr	r2, [sp, #8]
 80093ce:	edd4 7a00 	vldr	s15, [r4]
 80093d2:	edd2 da01 	vldr	s27, [r2, #4]
 80093d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093d8:	ed91 da01 	vldr	s26, [r1, #4]
 80093dc:	ed92 ca01 	vldr	s24, [r2, #4]
 80093e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093e2:	9903      	ldr	r1, [sp, #12]
 80093e4:	edcd 7a03 	vstr	s15, [sp, #12]
 80093e8:	edd2 7a00 	vldr	s15, [r2]
 80093ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ee:	edcd 7a02 	vstr	s15, [sp, #8]
 80093f2:	edd2 7a00 	vldr	s15, [r2]
 80093f6:	edd0 ea01 	vldr	s29, [r0, #4]
 80093fa:	edd1 ca01 	vldr	s25, [r1, #4]
 80093fe:	eddc ba00 	vldr	s23, [ip]
 8009402:	edd7 aa00 	vldr	s21, [r7]
 8009406:	ed96 aa00 	vldr	s20, [r6]
 800940a:	edd5 9a00 	vldr	s19, [r5]
 800940e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009412:	4403      	add	r3, r0
 8009414:	ed93 fa01 	vldr	s30, [r3, #4]
 8009418:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800941c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009420:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009428:	46cc      	mov	ip, r9
 800942a:	e001      	b.n	8009430 <arm_radix8_butterfly_f32+0x2fc>
 800942c:	3f3504f3 	.word	0x3f3504f3
 8009430:	ed91 6a00 	vldr	s12, [r1]
 8009434:	ed93 5a00 	vldr	s10, [r3]
 8009438:	edd0 fa00 	vldr	s31, [r0]
 800943c:	edd4 7a00 	vldr	s15, [r4]
 8009440:	ed95 7a00 	vldr	s14, [r5]
 8009444:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009448:	ed17 3a01 	vldr	s6, [r7, #-4]
 800944c:	ed92 2a00 	vldr	s4, [r2]
 8009450:	ed96 0a00 	vldr	s0, [r6]
 8009454:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009458:	ee32 1a06 	vadd.f32	s2, s4, s12
 800945c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009460:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009464:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009468:	ee71 6a24 	vadd.f32	s13, s2, s9
 800946c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009470:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009478:	ed06 6a01 	vstr	s12, [r6, #-4]
 800947c:	edd4 8a01 	vldr	s17, [r4, #4]
 8009480:	ed92 9a01 	vldr	s18, [r2, #4]
 8009484:	edd7 0a00 	vldr	s1, [r7]
 8009488:	edd1 2a01 	vldr	s5, [r1, #4]
 800948c:	ed95 7a01 	vldr	s14, [r5, #4]
 8009490:	ed93 6a01 	vldr	s12, [r3, #4]
 8009494:	edd0 5a01 	vldr	s11, [r0, #4]
 8009498:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800949c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80094a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80094a4:	ee78 fac7 	vsub.f32	s31, s17, s14
 80094a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80094ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 80094b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80094b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80094b8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80094bc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80094c0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80094c4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80094c8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80094cc:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80094d0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80094d4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80094d8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80094dc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80094e0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80094e4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80094e8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80094ec:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80094f0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80094f4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80094f8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80094fc:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009500:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009504:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009508:	ee74 2a62 	vsub.f32	s5, s8, s5
 800950c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009510:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009514:	ee73 8a09 	vadd.f32	s17, s6, s18
 8009518:	ee74 4a82 	vadd.f32	s9, s9, s4
 800951c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009520:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009524:	ee35 3a85 	vadd.f32	s6, s11, s10
 8009528:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800952c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009530:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009534:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8009538:	ee30 7a68 	vsub.f32	s14, s0, s17
 800953c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009540:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009544:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009548:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800954c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8009550:	eddd 1a02 	vldr	s3, [sp, #8]
 8009554:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009558:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800955c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009560:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009564:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009568:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800956c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009570:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009574:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009578:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800957c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009580:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009584:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009588:	ee22 2a08 	vmul.f32	s4, s4, s16
 800958c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009590:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009594:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009598:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800959c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80095a0:	ee74 0a60 	vsub.f32	s1, s8, s1
 80095a4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80095a8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80095ac:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80095b0:	ee72 1a21 	vadd.f32	s3, s4, s3
 80095b4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80095b8:	ee38 2a89 	vadd.f32	s4, s17, s18
 80095bc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80095c0:	ee38 8a04 	vadd.f32	s16, s16, s8
 80095c4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80095c8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80095cc:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80095d0:	eddd 5a03 	vldr	s11, [sp, #12]
 80095d4:	edc6 fa00 	vstr	s31, [r6]
 80095d8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80095dc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80095e0:	ee30 0a45 	vsub.f32	s0, s0, s10
 80095e4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80095e8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80095ec:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80095f0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80095f4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80095f8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80095fc:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009600:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009604:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009608:	ee36 6a67 	vsub.f32	s12, s12, s15
 800960c:	44c4      	add	ip, r8
 800960e:	45e3      	cmp	fp, ip
 8009610:	edc3 3a00 	vstr	s7, [r3]
 8009614:	edc3 6a01 	vstr	s13, [r3, #4]
 8009618:	4456      	add	r6, sl
 800961a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800961e:	edc7 0a00 	vstr	s1, [r7]
 8009622:	4453      	add	r3, sl
 8009624:	ed80 2a00 	vstr	s4, [r0]
 8009628:	edc0 2a01 	vstr	s5, [r0, #4]
 800962c:	4457      	add	r7, sl
 800962e:	edc2 1a00 	vstr	s3, [r2]
 8009632:	ed82 7a01 	vstr	s14, [r2, #4]
 8009636:	4450      	add	r0, sl
 8009638:	ed85 8a00 	vstr	s16, [r5]
 800963c:	ed85 0a01 	vstr	s0, [r5, #4]
 8009640:	4452      	add	r2, sl
 8009642:	edc1 4a00 	vstr	s9, [r1]
 8009646:	4455      	add	r5, sl
 8009648:	ed81 3a01 	vstr	s6, [r1, #4]
 800964c:	edc4 8a00 	vstr	s17, [r4]
 8009650:	ed84 6a01 	vstr	s12, [r4, #4]
 8009654:	4451      	add	r1, sl
 8009656:	4454      	add	r4, sl
 8009658:	f63f aeea 	bhi.w	8009430 <arm_radix8_butterfly_f32+0x2fc>
 800965c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965e:	3308      	adds	r3, #8
 8009660:	930b      	str	r3, [sp, #44]	; 0x2c
 8009662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009664:	3308      	adds	r3, #8
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	3308      	adds	r3, #8
 800966c:	9309      	str	r3, [sp, #36]	; 0x24
 800966e:	9b08      	ldr	r3, [sp, #32]
 8009670:	3308      	adds	r3, #8
 8009672:	9308      	str	r3, [sp, #32]
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	3308      	adds	r3, #8
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	3308      	adds	r3, #8
 800967e:	9306      	str	r3, [sp, #24]
 8009680:	9b05      	ldr	r3, [sp, #20]
 8009682:	3308      	adds	r3, #8
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	3308      	adds	r3, #8
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800968e:	f109 0901 	add.w	r9, r9, #1
 8009692:	454b      	cmp	r3, r9
 8009694:	f47f ae7d 	bne.w	8009392 <arm_radix8_butterfly_f32+0x25e>
 8009698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	b29b      	uxth	r3, r3
 800969e:	46d9      	mov	r9, fp
 80096a0:	9310      	str	r3, [sp, #64]	; 0x40
 80096a2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80096a6:	e554      	b.n	8009152 <arm_radix8_butterfly_f32+0x1e>
 80096a8:	b015      	add	sp, #84	; 0x54
 80096aa:	ecbd 8b10 	vpop	{d8-d15}
 80096ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b2:	bf00      	nop

080096b4 <memset>:
 80096b4:	4402      	add	r2, r0
 80096b6:	4603      	mov	r3, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <__errno>:
 80096c4:	4b01      	ldr	r3, [pc, #4]	; (80096cc <__errno+0x8>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20000090 	.word	0x20000090

080096d0 <__libc_init_array>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4d0d      	ldr	r5, [pc, #52]	; (8009708 <__libc_init_array+0x38>)
 80096d4:	4c0d      	ldr	r4, [pc, #52]	; (800970c <__libc_init_array+0x3c>)
 80096d6:	1b64      	subs	r4, r4, r5
 80096d8:	10a4      	asrs	r4, r4, #2
 80096da:	2600      	movs	r6, #0
 80096dc:	42a6      	cmp	r6, r4
 80096de:	d109      	bne.n	80096f4 <__libc_init_array+0x24>
 80096e0:	4d0b      	ldr	r5, [pc, #44]	; (8009710 <__libc_init_array+0x40>)
 80096e2:	4c0c      	ldr	r4, [pc, #48]	; (8009714 <__libc_init_array+0x44>)
 80096e4:	f000 f940 	bl	8009968 <_init>
 80096e8:	1b64      	subs	r4, r4, r5
 80096ea:	10a4      	asrs	r4, r4, #2
 80096ec:	2600      	movs	r6, #0
 80096ee:	42a6      	cmp	r6, r4
 80096f0:	d105      	bne.n	80096fe <__libc_init_array+0x2e>
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f8:	4798      	blx	r3
 80096fa:	3601      	adds	r6, #1
 80096fc:	e7ee      	b.n	80096dc <__libc_init_array+0xc>
 80096fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009702:	4798      	blx	r3
 8009704:	3601      	adds	r6, #1
 8009706:	e7f2      	b.n	80096ee <__libc_init_array+0x1e>
 8009708:	0801c9b8 	.word	0x0801c9b8
 800970c:	0801c9b8 	.word	0x0801c9b8
 8009710:	0801c9b8 	.word	0x0801c9b8
 8009714:	0801c9bc 	.word	0x0801c9bc

08009718 <sqrt>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	ed2d 8b02 	vpush	{d8}
 800971e:	ec55 4b10 	vmov	r4, r5, d0
 8009722:	f000 f843 	bl	80097ac <__ieee754_sqrt>
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	4620      	mov	r0, r4
 800972c:	4629      	mov	r1, r5
 800972e:	eeb0 8a40 	vmov.f32	s16, s0
 8009732:	eef0 8a60 	vmov.f32	s17, s1
 8009736:	f7f7 f99d 	bl	8000a74 <__aeabi_dcmpun>
 800973a:	b990      	cbnz	r0, 8009762 <sqrt+0x4a>
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	4620      	mov	r0, r4
 8009742:	4629      	mov	r1, r5
 8009744:	f7f7 f96e 	bl	8000a24 <__aeabi_dcmplt>
 8009748:	b158      	cbz	r0, 8009762 <sqrt+0x4a>
 800974a:	f7ff ffbb 	bl	80096c4 <__errno>
 800974e:	2321      	movs	r3, #33	; 0x21
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	f7f7 f81b 	bl	8000794 <__aeabi_ddiv>
 800975e:	ec41 0b18 	vmov	d8, r0, r1
 8009762:	eeb0 0a48 	vmov.f32	s0, s16
 8009766:	eef0 0a68 	vmov.f32	s1, s17
 800976a:	ecbd 8b02 	vpop	{d8}
 800976e:	bd38      	pop	{r3, r4, r5, pc}

08009770 <sqrtf>:
 8009770:	b508      	push	{r3, lr}
 8009772:	ed2d 8b02 	vpush	{d8}
 8009776:	eeb0 8a40 	vmov.f32	s16, s0
 800977a:	f000 f8f1 	bl	8009960 <__ieee754_sqrtf>
 800977e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	d60c      	bvs.n	80097a2 <sqrtf+0x32>
 8009788:	eddf 8a07 	vldr	s17, [pc, #28]	; 80097a8 <sqrtf+0x38>
 800978c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	d505      	bpl.n	80097a2 <sqrtf+0x32>
 8009796:	f7ff ff95 	bl	80096c4 <__errno>
 800979a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800979e:	2321      	movs	r3, #33	; 0x21
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	ecbd 8b02 	vpop	{d8}
 80097a6:	bd08      	pop	{r3, pc}
 80097a8:	00000000 	.word	0x00000000

080097ac <__ieee754_sqrt>:
 80097ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	ec55 4b10 	vmov	r4, r5, d0
 80097b4:	4e67      	ldr	r6, [pc, #412]	; (8009954 <__ieee754_sqrt+0x1a8>)
 80097b6:	43ae      	bics	r6, r5
 80097b8:	ee10 0a10 	vmov	r0, s0
 80097bc:	ee10 2a10 	vmov	r2, s0
 80097c0:	4629      	mov	r1, r5
 80097c2:	462b      	mov	r3, r5
 80097c4:	d10d      	bne.n	80097e2 <__ieee754_sqrt+0x36>
 80097c6:	f7f6 febb 	bl	8000540 <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f6 fcff 	bl	80001d4 <__adddf3>
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	ec45 4b10 	vmov	d0, r4, r5
 80097de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	dc0b      	bgt.n	80097fe <__ieee754_sqrt+0x52>
 80097e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097ea:	4326      	orrs	r6, r4
 80097ec:	d0f5      	beq.n	80097da <__ieee754_sqrt+0x2e>
 80097ee:	b135      	cbz	r5, 80097fe <__ieee754_sqrt+0x52>
 80097f0:	f7f6 fcee 	bl	80001d0 <__aeabi_dsub>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	f7f6 ffcc 	bl	8000794 <__aeabi_ddiv>
 80097fc:	e7eb      	b.n	80097d6 <__ieee754_sqrt+0x2a>
 80097fe:	1509      	asrs	r1, r1, #20
 8009800:	f000 808d 	beq.w	800991e <__ieee754_sqrt+0x172>
 8009804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009808:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800980c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009810:	07c9      	lsls	r1, r1, #31
 8009812:	bf5c      	itt	pl
 8009814:	005b      	lslpl	r3, r3, #1
 8009816:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800981a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800981e:	bf58      	it	pl
 8009820:	0052      	lslpl	r2, r2, #1
 8009822:	2500      	movs	r5, #0
 8009824:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009828:	1076      	asrs	r6, r6, #1
 800982a:	0052      	lsls	r2, r2, #1
 800982c:	f04f 0e16 	mov.w	lr, #22
 8009830:	46ac      	mov	ip, r5
 8009832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009836:	eb0c 0001 	add.w	r0, ip, r1
 800983a:	4298      	cmp	r0, r3
 800983c:	bfde      	ittt	le
 800983e:	1a1b      	suble	r3, r3, r0
 8009840:	eb00 0c01 	addle.w	ip, r0, r1
 8009844:	186d      	addle	r5, r5, r1
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	f1be 0e01 	subs.w	lr, lr, #1
 800984c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009850:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009854:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009858:	d1ed      	bne.n	8009836 <__ieee754_sqrt+0x8a>
 800985a:	4674      	mov	r4, lr
 800985c:	2720      	movs	r7, #32
 800985e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009862:	4563      	cmp	r3, ip
 8009864:	eb01 000e 	add.w	r0, r1, lr
 8009868:	dc02      	bgt.n	8009870 <__ieee754_sqrt+0xc4>
 800986a:	d113      	bne.n	8009894 <__ieee754_sqrt+0xe8>
 800986c:	4290      	cmp	r0, r2
 800986e:	d811      	bhi.n	8009894 <__ieee754_sqrt+0xe8>
 8009870:	2800      	cmp	r0, #0
 8009872:	eb00 0e01 	add.w	lr, r0, r1
 8009876:	da57      	bge.n	8009928 <__ieee754_sqrt+0x17c>
 8009878:	f1be 0f00 	cmp.w	lr, #0
 800987c:	db54      	blt.n	8009928 <__ieee754_sqrt+0x17c>
 800987e:	f10c 0801 	add.w	r8, ip, #1
 8009882:	eba3 030c 	sub.w	r3, r3, ip
 8009886:	4290      	cmp	r0, r2
 8009888:	bf88      	it	hi
 800988a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800988e:	1a12      	subs	r2, r2, r0
 8009890:	440c      	add	r4, r1
 8009892:	46c4      	mov	ip, r8
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	3f01      	subs	r7, #1
 8009898:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800989c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80098a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80098a4:	d1dd      	bne.n	8009862 <__ieee754_sqrt+0xb6>
 80098a6:	4313      	orrs	r3, r2
 80098a8:	d01b      	beq.n	80098e2 <__ieee754_sqrt+0x136>
 80098aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009958 <__ieee754_sqrt+0x1ac>
 80098ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800995c <__ieee754_sqrt+0x1b0>
 80098b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80098b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80098ba:	f7f6 fc89 	bl	80001d0 <__aeabi_dsub>
 80098be:	e9da 8900 	ldrd	r8, r9, [sl]
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4640      	mov	r0, r8
 80098c8:	4649      	mov	r1, r9
 80098ca:	f7f7 f8b5 	bl	8000a38 <__aeabi_dcmple>
 80098ce:	b140      	cbz	r0, 80098e2 <__ieee754_sqrt+0x136>
 80098d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80098d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80098dc:	d126      	bne.n	800992c <__ieee754_sqrt+0x180>
 80098de:	3501      	adds	r5, #1
 80098e0:	463c      	mov	r4, r7
 80098e2:	106a      	asrs	r2, r5, #1
 80098e4:	0863      	lsrs	r3, r4, #1
 80098e6:	07e9      	lsls	r1, r5, #31
 80098e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80098ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80098f0:	bf48      	it	mi
 80098f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80098f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80098fa:	461c      	mov	r4, r3
 80098fc:	e76d      	b.n	80097da <__ieee754_sqrt+0x2e>
 80098fe:	0ad3      	lsrs	r3, r2, #11
 8009900:	3815      	subs	r0, #21
 8009902:	0552      	lsls	r2, r2, #21
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0fa      	beq.n	80098fe <__ieee754_sqrt+0x152>
 8009908:	02dc      	lsls	r4, r3, #11
 800990a:	d50a      	bpl.n	8009922 <__ieee754_sqrt+0x176>
 800990c:	f1c1 0420 	rsb	r4, r1, #32
 8009910:	fa22 f404 	lsr.w	r4, r2, r4
 8009914:	1e4d      	subs	r5, r1, #1
 8009916:	408a      	lsls	r2, r1
 8009918:	4323      	orrs	r3, r4
 800991a:	1b41      	subs	r1, r0, r5
 800991c:	e772      	b.n	8009804 <__ieee754_sqrt+0x58>
 800991e:	4608      	mov	r0, r1
 8009920:	e7f0      	b.n	8009904 <__ieee754_sqrt+0x158>
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	3101      	adds	r1, #1
 8009926:	e7ef      	b.n	8009908 <__ieee754_sqrt+0x15c>
 8009928:	46e0      	mov	r8, ip
 800992a:	e7aa      	b.n	8009882 <__ieee754_sqrt+0xd6>
 800992c:	f7f6 fc52 	bl	80001d4 <__adddf3>
 8009930:	e9da 8900 	ldrd	r8, r9, [sl]
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f7 f872 	bl	8000a24 <__aeabi_dcmplt>
 8009940:	b120      	cbz	r0, 800994c <__ieee754_sqrt+0x1a0>
 8009942:	1ca0      	adds	r0, r4, #2
 8009944:	bf08      	it	eq
 8009946:	3501      	addeq	r5, #1
 8009948:	3402      	adds	r4, #2
 800994a:	e7ca      	b.n	80098e2 <__ieee754_sqrt+0x136>
 800994c:	3401      	adds	r4, #1
 800994e:	f024 0401 	bic.w	r4, r4, #1
 8009952:	e7c6      	b.n	80098e2 <__ieee754_sqrt+0x136>
 8009954:	7ff00000 	.word	0x7ff00000
 8009958:	20000098 	.word	0x20000098
 800995c:	200000a0 	.word	0x200000a0

08009960 <__ieee754_sqrtf>:
 8009960:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009964:	4770      	bx	lr
	...

08009968 <_init>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	bf00      	nop
 800996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996e:	bc08      	pop	{r3}
 8009970:	469e      	mov	lr, r3
 8009972:	4770      	bx	lr

08009974 <_fini>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr
